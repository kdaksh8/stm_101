
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080082f0  080082f0  000092f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800830c  0800830c  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800830c  0800830c  0000930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008310  08008310  00009310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008314  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  2000007c  08008390  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  08008390  0000a9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128d0  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e1  00000000  00000000  0001c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c29  00000000  00000000  00020b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018272  00000000  00000000  00021789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ff6  00000000  00000000  000399fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910a9  00000000  00000000  0004d9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dea9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  000deae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e30c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080082d8 	.word	0x080082d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080082d8 	.word	0x080082d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fbed 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f895 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f975 	bl	8000800 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000516:	f007 fa89 	bl	8007a2c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 800051a:	f000 f8f7 	bl	800070c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800051e:	2100      	movs	r1, #0
 8000520:	4845      	ldr	r0, [pc, #276]	@ (8000638 <main+0x134>)
 8000522:	f003 fd0f 	bl	8003f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000526:	2104      	movs	r1, #4
 8000528:	4843      	ldr	r0, [pc, #268]	@ (8000638 <main+0x134>)
 800052a:	f003 fd0b 	bl	8003f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800052e:	2108      	movs	r1, #8
 8000530:	4841      	ldr	r0, [pc, #260]	@ (8000638 <main+0x134>)
 8000532:	f003 fd07 	bl	8003f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000536:	210c      	movs	r1, #12
 8000538:	483f      	ldr	r0, [pc, #252]	@ (8000638 <main+0x134>)
 800053a:	f003 fd03 	bl	8003f44 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    MX_USB_HOST_Process();
 800053e:	f007 fa9b 	bl	8007a78 <MX_USB_HOST_Process>
//	    HAL_GPIO_WritePin(GPIOD, LD6_Pin, 1);
//	    HAL_Delay(70);
//	    HAL_GPIO_WritePin(GPIOD, LD6_Pin, 0);
//	    HAL_GPIO_WritePin(GPIOD, LD4_Pin, 1);
//	    HAL_Delay(70);
	    for(int D=0; D<=100; D++)
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e017      	b.n	8000578 <main+0x74>
	    {
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, D*400);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800054e:	fb03 f202 	mul.w	r2, r3, r2
 8000552:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <main+0x134>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	635a      	str	r2, [r3, #52]	@ 0x34
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, (100-D)*400);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800055e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000562:	fb03 f202 	mul.w	r2, r3, r2
 8000566:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <main+0x134>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	641a      	str	r2, [r3, #64]	@ 0x40
	    	HAL_Delay(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fc2d 	bl	8000dcc <HAL_Delay>
	    for(int D=0; D<=100; D++)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b64      	cmp	r3, #100	@ 0x64
 800057c:	dde4      	ble.n	8000548 <main+0x44>
	    }
	    for(int D=0; D<=100; D++)
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	e017      	b.n	80005b4 <main+0xb0>
	    {
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, D*400);
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800058a:	fb03 f202 	mul.w	r2, r3, r2
 800058e:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <main+0x134>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	639a      	str	r2, [r3, #56]	@ 0x38
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (100-D)*400);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800059a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800059e:	fb03 f202 	mul.w	r2, r3, r2
 80005a2:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <main+0x134>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	635a      	str	r2, [r3, #52]	@ 0x34

	    	HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fc0f 	bl	8000dcc <HAL_Delay>
	    for(int D=0; D<=100; D++)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2b64      	cmp	r3, #100	@ 0x64
 80005b8:	dde4      	ble.n	8000584 <main+0x80>
	    }
	    for(int D=0; D<=100; D++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e017      	b.n	80005f0 <main+0xec>
	    {
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, D*400);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005c6:	fb03 f202 	mul.w	r2, r3, r2
 80005ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <main+0x134>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (100-D)*400);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80005d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005da:	fb03 f202 	mul.w	r2, r3, r2
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <main+0x134>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	639a      	str	r2, [r3, #56]	@ 0x38

	    	HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fbf1 	bl	8000dcc <HAL_Delay>
	    for(int D=0; D<=100; D++)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3301      	adds	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b64      	cmp	r3, #100	@ 0x64
 80005f4:	dde4      	ble.n	80005c0 <main+0xbc>
	    }
	    for(int D=0; D<=100; D++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	e017      	b.n	800062c <main+0x128>
	    {
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, D*400);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000602:	fb03 f202 	mul.w	r2, r3, r2
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <main+0x134>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	641a      	str	r2, [r3, #64]	@ 0x40
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (100-D)*400);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000612:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000616:	fb03 f202 	mul.w	r2, r3, r2
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <main+0x134>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	63da      	str	r2, [r3, #60]	@ 0x3c

	    	HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fbd3 	bl	8000dcc <HAL_Delay>
	    for(int D=0; D<=100; D++)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b64      	cmp	r3, #100	@ 0x64
 8000630:	dde4      	ble.n	80005fc <main+0xf8>
//	    {
//	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, D*400);
//	    	HAL_Delay(10);
//	    }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000632:	f007 fa21 	bl	8007a78 <MX_USB_HOST_Process>
	    MX_USB_HOST_Process();
 8000636:	e782      	b.n	800053e <main+0x3a>
 8000638:	20000098 	.word	0x20000098

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fdb6 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <SystemClock_Config+0xc8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <SystemClock_Config+0xc8>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <SystemClock_Config+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <SystemClock_Config+0xcc>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <SystemClock_Config+0xcc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b0:	23c0      	movs	r3, #192	@ 0xc0
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ff8b 	bl	80035dc <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f9d6 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2103      	movs	r1, #3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 f9ed 	bl	8003acc <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f8:	f000 f9c0 	bl	8000a7c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	@ 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072e:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000730:	4a32      	ldr	r2, [pc, #200]	@ (80007fc <MX_TIM4_Init+0xf0>)
 8000732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000734:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_TIM4_Init+0xec>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000740:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_TIM4_Init+0xec>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000754:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000756:	f003 fba5 	bl	8003ea4 <HAL_TIM_PWM_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f98c 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4619      	mov	r1, r3
 8000772:	4821      	ldr	r0, [pc, #132]	@ (80007f8 <MX_TIM4_Init+0xec>)
 8000774:	f003 ff90 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800077e:	f000 f97d 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	@ 0x60
 8000784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <MX_TIM4_Init+0xec>)
 800079a:	f003 fc83 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007a4:	f000 f96a 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2204      	movs	r2, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_TIM4_Init+0xec>)
 80007b0:	f003 fc78 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007ba:	f000 f95f 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2208      	movs	r2, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_TIM4_Init+0xec>)
 80007c6:	f003 fc6d 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80007d0:	f000 f954 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	220c      	movs	r2, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <MX_TIM4_Init+0xec>)
 80007dc:	f003 fc62 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80007e6:	f000 f949 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ea:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <MX_TIM4_Init+0xec>)
 80007ec:	f000 f996 	bl	8000b1c <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000098 	.word	0x20000098
 80007fc:	40000800 	.word	0x40000800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4b92      	ldr	r3, [pc, #584]	@ (8000a64 <MX_GPIO_Init+0x264>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a91      	ldr	r2, [pc, #580]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b8f      	ldr	r3, [pc, #572]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b8b      	ldr	r3, [pc, #556]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a8a      	ldr	r2, [pc, #552]	@ (8000a64 <MX_GPIO_Init+0x264>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b88      	ldr	r3, [pc, #544]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b84      	ldr	r3, [pc, #528]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a83      	ldr	r2, [pc, #524]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b81      	ldr	r3, [pc, #516]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a7c      	ldr	r2, [pc, #496]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a64 <MX_GPIO_Init+0x264>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b76      	ldr	r3, [pc, #472]	@ (8000a64 <MX_GPIO_Init+0x264>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a75      	ldr	r2, [pc, #468]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b73      	ldr	r3, [pc, #460]	@ (8000a64 <MX_GPIO_Init+0x264>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a64 <MX_GPIO_Init+0x264>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a6e      	ldr	r2, [pc, #440]	@ (8000a64 <MX_GPIO_Init+0x264>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a64 <MX_GPIO_Init+0x264>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4869      	ldr	r0, [pc, #420]	@ (8000a68 <MX_GPIO_Init+0x268>)
 80008c4:	f000 fd3c 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4867      	ldr	r0, [pc, #412]	@ (8000a6c <MX_GPIO_Init+0x26c>)
 80008ce:	f000 fd37 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2110      	movs	r1, #16
 80008d6:	4866      	ldr	r0, [pc, #408]	@ (8000a70 <MX_GPIO_Init+0x270>)
 80008d8:	f000 fd32 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	485e      	ldr	r0, [pc, #376]	@ (8000a68 <MX_GPIO_Init+0x268>)
 80008f0:	f000 fba2 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f4:	2308      	movs	r3, #8
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4857      	ldr	r0, [pc, #348]	@ (8000a68 <MX_GPIO_Init+0x268>)
 800090c:	f000 fb94 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000910:	2332      	movs	r3, #50	@ 0x32
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000914:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4850      	ldr	r0, [pc, #320]	@ (8000a68 <MX_GPIO_Init+0x268>)
 8000926:	f000 fb87 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	484a      	ldr	r0, [pc, #296]	@ (8000a6c <MX_GPIO_Init+0x26c>)
 8000942:	f000 fb79 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4842      	ldr	r0, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x26c>)
 8000962:	f000 fb69 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	483e      	ldr	r0, [pc, #248]	@ (8000a74 <MX_GPIO_Init+0x274>)
 800097c:	f000 fb5c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000980:	2310      	movs	r3, #16
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000990:	2306      	movs	r3, #6
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4836      	ldr	r0, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0x274>)
 800099c:	f000 fb4c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009a0:	23e0      	movs	r3, #224	@ 0xe0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b0:	2305      	movs	r3, #5
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <MX_GPIO_Init+0x274>)
 80009bc:	f000 fb3c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d2:	2305      	movs	r3, #5
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4826      	ldr	r0, [pc, #152]	@ (8000a78 <MX_GPIO_Init+0x278>)
 80009de:	f000 fb2b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f4:	2306      	movs	r3, #6
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <MX_GPIO_Init+0x26c>)
 8000a00:	f000 fb1a 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a04:	2310      	movs	r3, #16
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4815      	ldr	r0, [pc, #84]	@ (8000a70 <MX_GPIO_Init+0x270>)
 8000a1c:	f000 fb0c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <MX_GPIO_Init+0x270>)
 8000a34:	f000 fb00 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a38:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <MX_GPIO_Init+0x278>)
 8000a56:	f000 faef 	bl	8001038 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	@ 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 fa74 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10d      	bne.n	8000b06 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x40>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x40>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <HAL_TIM_PWM_MspInit+0x40>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40000800 	.word	0x40000800
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <HAL_TIM_MspPostInit+0x68>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d11e      	bne.n	8000b7c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_TIM_MspPostInit+0x70>)
 8000b78:	f000 fa5e 	bl	8001038 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40000800 	.word	0x40000800
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f8d1 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <OTG_FS_IRQHandler+0x10>)
 8000bf6:	f000 fe9d 	bl	8001934 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200004c4 	.word	0x200004c4

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f007 fada 	bl	80081ec <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20020000 	.word	0x20020000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200000e0 	.word	0x200000e0
 8000c6c:	200009f0 	.word	0x200009f0

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c98:	f7ff ffea 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f007 fa99 	bl	80081f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc1d 	bl	8000504 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cd8:	08008314 	.word	0x08008314
  ldr r2, =_sbss
 8000cdc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ce0:	200009ec 	.word	0x200009ec

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f94f 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff feb4 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f967 	bl	800101e <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f92f 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200000e4 	.word	0x200000e4

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200000e4 	.word	0x200000e4

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	@ (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff29 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff3e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff31 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e159      	b.n	8001308 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 8148 	bne.w	8001302 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	2b02      	cmp	r3, #2
 8001088:	d130      	bne.n	80010ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 0201 	and.w	r2, r3, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d017      	beq.n	8001128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	69b9      	ldr	r1, [r7, #24]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80a2 	beq.w	8001302 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b57      	ldr	r3, [pc, #348]	@ (8001320 <HAL_GPIO_Init+0x2e8>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	4a56      	ldr	r2, [pc, #344]	@ (8001320 <HAL_GPIO_Init+0x2e8>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ce:	4b54      	ldr	r3, [pc, #336]	@ (8001320 <HAL_GPIO_Init+0x2e8>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011da:	4a52      	ldr	r2, [pc, #328]	@ (8001324 <HAL_GPIO_Init+0x2ec>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a49      	ldr	r2, [pc, #292]	@ (8001328 <HAL_GPIO_Init+0x2f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x202>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a48      	ldr	r2, [pc, #288]	@ (800132c <HAL_GPIO_Init+0x2f4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x1fe>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a47      	ldr	r2, [pc, #284]	@ (8001330 <HAL_GPIO_Init+0x2f8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x1fa>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a46      	ldr	r2, [pc, #280]	@ (8001334 <HAL_GPIO_Init+0x2fc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x1f6>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a45      	ldr	r2, [pc, #276]	@ (8001338 <HAL_GPIO_Init+0x300>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x1f2>
 8001226:	2304      	movs	r3, #4
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x204>
 800122a:	2307      	movs	r3, #7
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x204>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x204>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x204>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x204>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	@ (8001324 <HAL_GPIO_Init+0x2ec>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b38      	ldr	r3, [pc, #224]	@ (800133c <HAL_GPIO_Init+0x304>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a2f      	ldr	r2, [pc, #188]	@ (800133c <HAL_GPIO_Init+0x304>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_GPIO_Init+0x304>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a24      	ldr	r2, [pc, #144]	@ (800133c <HAL_GPIO_Init+0x304>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <HAL_GPIO_Init+0x304>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1a      	ldr	r2, [pc, #104]	@ (800133c <HAL_GPIO_Init+0x304>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_GPIO_Init+0x304>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_GPIO_Init+0x304>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f aea2 	bls.w	8001054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af02      	add	r7, sp, #8
 8001378:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e059      	b.n	8001438 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f006 fba2 	bl	8007ae8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b2:	d102      	bne.n	80013ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fa4d 	bl	800485e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7c1a      	ldrb	r2, [r3, #16]
 80013cc:	f88d 2000 	strb.w	r2, [sp]
 80013d0:	3304      	adds	r3, #4
 80013d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d4:	f003 f9ce 	bl	8004774 <USB_CoreInit>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2202      	movs	r2, #2
 80013e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e026      	b.n	8001438 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fa45 	bl	8004880 <USB_SetCurrentMode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e017      	b.n	8001438 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7c1a      	ldrb	r2, [r3, #16]
 8001410:	f88d 2000 	strb.w	r2, [sp]
 8001414:	3304      	adds	r3, #4
 8001416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001418:	f003 fbee 	bl	8004bf8 <USB_HostInit>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2202      	movs	r2, #2
 8001426:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e004      	b.n	8001438 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af04      	add	r7, sp, #16
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	460b      	mov	r3, r1
 8001454:	70bb      	strb	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800145a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800145c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_HCD_HC_Init+0x2c>
 8001468:	2302      	movs	r3, #2
 800146a:	e09d      	b.n	80015a8 <HAL_HCD_HC_Init+0x168>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3319      	adds	r3, #25
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001488:	78fa      	ldrb	r2, [r7, #3]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3314      	adds	r3, #20
 8001498:	787a      	ldrb	r2, [r7, #1]
 800149a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3315      	adds	r3, #21
 80014ac:	78fa      	ldrb	r2, [r7, #3]
 80014ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3326      	adds	r3, #38	@ 0x26
 80014c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	78bb      	ldrb	r3, [r7, #2]
 80014ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014ce:	b2d8      	uxtb	r0, r3
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3316      	adds	r3, #22
 80014de:	4602      	mov	r2, r0
 80014e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	4619      	mov	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fbc8 	bl	8001c7c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80014ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da0a      	bge.n	800150a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3317      	adds	r3, #23
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e009      	b.n	800151e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3317      	adds	r3, #23
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fcb6 	bl	8004e94 <USB_GetHostSpeed>
 8001528:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800152a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10b      	bne.n	800154a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001532:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_HCD_HC_Init+0x10a>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2bbc      	cmp	r3, #188	@ 0xbc
 8001544:	d901      	bls.n	800154a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001546:	23bc      	movs	r3, #188	@ 0xbc
 8001548:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3318      	adds	r3, #24
 800155a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800155e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	b298      	uxth	r0, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3328      	adds	r3, #40	@ 0x28
 8001574:	4602      	mov	r2, r0
 8001576:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	b29b      	uxth	r3, r3
 8001580:	787c      	ldrb	r4, [r7, #1]
 8001582:	78ba      	ldrb	r2, [r7, #2]
 8001584:	78f9      	ldrb	r1, [r7, #3]
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4623      	mov	r3, r4
 8001596:	f003 fca5 	bl	8004ee4 <USB_HC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}

080015b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_HCD_HC_Halt+0x1e>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e00f      	b.n	80015ee <HAL_HCD_HC_Halt+0x3e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 ffeb 	bl	80055ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4603      	mov	r3, r0
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	460b      	mov	r3, r1
 800160c:	70bb      	strb	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3317      	adds	r3, #23
 8001622:	78ba      	ldrb	r2, [r7, #2]
 8001624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3326      	adds	r3, #38	@ 0x26
 8001636:	787a      	ldrb	r2, [r7, #1]
 8001638:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800163a:	7c3b      	ldrb	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d114      	bne.n	800166a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	332a      	adds	r3, #42	@ 0x2a
 8001650:	2203      	movs	r2, #3
 8001652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3319      	adds	r3, #25
 8001664:	7f3a      	ldrb	r2, [r7, #28]
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e009      	b.n	800167e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	332a      	adds	r3, #42	@ 0x2a
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800167e:	787b      	ldrb	r3, [r7, #1]
 8001680:	2b03      	cmp	r3, #3
 8001682:	f200 8102 	bhi.w	800188a <HAL_HCD_HC_SubmitRequest+0x292>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	08001875 	.word	0x08001875
 8001694:	08001761 	.word	0x08001761
 8001698:	080017eb 	.word	0x080017eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 80f5 	bne.w	800188e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d12d      	bne.n	8001706 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016aa:	8b3b      	ldrh	r3, [r7, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	333d      	adds	r3, #61	@ 0x3d
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	333d      	adds	r3, #61	@ 0x3d
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	332a      	adds	r3, #42	@ 0x2a
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80016ee:	e0ce      	b.n	800188e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	332a      	adds	r3, #42	@ 0x2a
 8001700:	2202      	movs	r2, #2
 8001702:	701a      	strb	r2, [r3, #0]
      break;
 8001704:	e0c3      	b.n	800188e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	331a      	adds	r3, #26
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 80b8 	bne.w	800188e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	333c      	adds	r3, #60	@ 0x3c
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	332a      	adds	r3, #42	@ 0x2a
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
      break;
 8001748:	e0a1      	b.n	800188e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	332a      	adds	r3, #42	@ 0x2a
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
      break;
 800175e:	e096      	b.n	800188e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001760:	78bb      	ldrb	r3, [r7, #2]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d120      	bne.n	80017a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	333d      	adds	r3, #61	@ 0x3d
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10a      	bne.n	8001792 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	332a      	adds	r3, #42	@ 0x2a
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001790:	e07e      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	332a      	adds	r3, #42	@ 0x2a
 80017a2:	2202      	movs	r2, #2
 80017a4:	701a      	strb	r2, [r3, #0]
      break;
 80017a6:	e073      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	333c      	adds	r3, #60	@ 0x3c
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10a      	bne.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	332a      	adds	r3, #42	@ 0x2a
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
      break;
 80017d2:	e05d      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	332a      	adds	r3, #42	@ 0x2a
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
      break;
 80017e8:	e052      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ea:	78bb      	ldrb	r3, [r7, #2]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d120      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	333d      	adds	r3, #61	@ 0x3d
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10a      	bne.n	800181c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	332a      	adds	r3, #42	@ 0x2a
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800181a:	e039      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	332a      	adds	r3, #42	@ 0x2a
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e02e      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	333c      	adds	r3, #60	@ 0x3c
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	332a      	adds	r3, #42	@ 0x2a
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e018      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	332a      	adds	r3, #42	@ 0x2a
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	e00d      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e002      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800188a:	bf00      	nop
 800188c:	e000      	b.n	8001890 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800188e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	332c      	adds	r3, #44	@ 0x2c
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	8b39      	ldrh	r1, [r7, #24]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4403      	add	r3, r0
 80018b4:	3334      	adds	r3, #52	@ 0x34
 80018b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	334c      	adds	r3, #76	@ 0x4c
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3338      	adds	r3, #56	@ 0x38
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3315      	adds	r3, #21
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	334d      	adds	r3, #77	@ 0x4d
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	3310      	adds	r3, #16
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	1d19      	adds	r1, r3, #4
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	799b      	ldrb	r3, [r3, #6]
 8001922:	461a      	mov	r2, r3
 8001924:	f003 fbf4 	bl	8005110 <USB_HC_StartXfer>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop

08001934 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f90e 	bl	8004b6c <USB_GetMode>
 8001950:	4603      	mov	r3, r0
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 80fb 	bne.w	8001b4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f8d1 	bl	8004b04 <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80f1 	beq.w	8001b4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 f8c8 	bl	8004b04 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800197e:	d104      	bne.n	800198a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f8b8 	bl	8004b04 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800199e:	d104      	bne.n	80019aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 f8a8 	bl	8004b04 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019be:	d104      	bne.n	80019ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 f898 	bl	8004b04 <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d103      	bne.n	80019e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2202      	movs	r2, #2
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f88a 	bl	8004b04 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019fa:	d120      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d113      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a16:	2110      	movs	r1, #16
 8001a18:	6938      	ldr	r0, [r7, #16]
 8001a1a:	f002 ff7d 	bl	8004918 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a1e:	6938      	ldr	r0, [r7, #16]
 8001a20:	f002 ffac 	bl	800497c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a5b      	ldrb	r3, [r3, #9]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d105      	bne.n	8001a38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 f98e 	bl	8004d54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f006 f8d3 	bl	8007be4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 f85e 	bl	8004b04 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a52:	d102      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 fd4d 	bl	80034f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 f850 	bl	8004b04 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d106      	bne.n	8001a7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f006 f89c 	bl	8007bac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 f83f 	bl	8004b04 <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a90:	d139      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fd7e 	bl	8005598 <USB_HC_ReadInterrupt>
 8001a9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e025      	b.n	8001af0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ace:	d106      	bne.n	8001ade <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f905 	bl	8001ce6 <HCD_HC_IN_IRQHandler>
 8001adc:	e005      	b.n	8001aea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 ff67 	bl	80029b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	795b      	ldrb	r3, [r3, #5]
 8001af4:	461a      	mov	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d3d3      	bcc.n	8001aa4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fffa 	bl	8004b04 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d101      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x1ea>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_HCD_IRQHandler+0x1ec>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0210 	bic.w	r2, r2, #16
 8001b32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 fbfe 	bl	8003336 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0210 	orr.w	r2, r2, #16
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	e000      	b.n	8001b4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b4c:	bf00      	nop
    }
  }
}
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_HCD_Start+0x16>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e013      	b.n	8001b92 <HAL_HCD_Start+0x3e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2101      	movs	r1, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 f952 	bl	8004e22 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fe5a 	bl	800483c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_HCD_Stop+0x16>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e00d      	b.n	8001bcc <HAL_HCD_Stop+0x32>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fe1c 	bl	80057fa <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f8f4 	bl	8004dce <USB_ResetPort>
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	334c      	adds	r3, #76	@ 0x4c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3338      	adds	r3, #56	@ 0x38
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f936 	bl	8004ec2 <USB_GetCurrentFrame>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 f911 	bl	8004e94 <USB_GetHostSpeed>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	331a      	adds	r3, #26
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	331b      	adds	r3, #27
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3325      	adds	r3, #37	@ 0x25
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3324      	adds	r3, #36	@ 0x24
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 ff10 	bl	8004b2a <USB_ReadChInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d11a      	bne.n	8001d4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d20:	461a      	mov	r2, r3
 8001d22:	2304      	movs	r3, #4
 8001d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	334d      	adds	r3, #77	@ 0x4d
 8001d36:	2207      	movs	r2, #7
 8001d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fc39 	bl	80055ba <USB_HC_Halt>
 8001d48:	e09e      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 fee9 	bl	8004b2a <USB_ReadChInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d62:	d11b      	bne.n	8001d9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	334d      	adds	r3, #77	@ 0x4d
 8001d88:	2208      	movs	r2, #8
 8001d8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fc10 	bl	80055ba <USB_HC_Halt>
 8001d9a:	e075      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fec0 	bl	8004b2a <USB_ReadChInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d11a      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	334d      	adds	r3, #77	@ 0x4d
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fbe9 	bl	80055ba <USB_HC_Halt>
 8001de8:	e04e      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fe99 	bl	8004b2a <USB_ReadChInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e02:	d11b      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	334d      	adds	r3, #77	@ 0x4d
 8001e28:	2209      	movs	r2, #9
 8001e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fbc0 	bl	80055ba <USB_HC_Halt>
 8001e3a:	e025      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 fe70 	bl	8004b2a <USB_ReadChInterrupts>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e50:	2b80      	cmp	r3, #128	@ 0x80
 8001e52:	d119      	bne.n	8001e88 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	334d      	adds	r3, #77	@ 0x4d
 8001e76:	2207      	movs	r2, #7
 8001e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fb99 	bl	80055ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fe4a 	bl	8004b2a <USB_ReadChInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea0:	d112      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fb85 	bl	80055ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec2:	6093      	str	r3, [r2, #8]
 8001ec4:	f000 bd75 	b.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fe2a 	bl	8004b2a <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 8128 	bne.w	8002132 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	331b      	adds	r3, #27
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d119      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	331b      	adds	r3, #27
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	0151      	lsls	r1, r2, #5
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	440a      	add	r2, r1
 8001f34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	799b      	ldrb	r3, [r3, #6]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01b      	beq.n	8001f7e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3330      	adds	r3, #48	@ 0x30
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	1ac9      	subs	r1, r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4403      	add	r3, r0
 8001f7a:	3338      	adds	r3, #56	@ 0x38
 8001f7c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	334d      	adds	r3, #77	@ 0x4d
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3344      	adds	r3, #68	@ 0x44
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3326      	adds	r3, #38	@ 0x26
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3326      	adds	r3, #38	@ 0x26
 8001fde:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d110      	bne.n	8002006 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fae4 	bl	80055ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffe:	461a      	mov	r2, r3
 8002000:	2310      	movs	r3, #16
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	e03d      	b.n	8002082 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3326      	adds	r3, #38	@ 0x26
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d00a      	beq.n	8002032 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3326      	adds	r3, #38	@ 0x26
 800202c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800202e:	2b01      	cmp	r3, #1
 8002030:	d127      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	0151      	lsls	r1, r2, #5
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	440a      	add	r2, r1
 8002048:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800204c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002050:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	334c      	adds	r3, #76	@ 0x4c
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334c      	adds	r3, #76	@ 0x4c
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f005 fdbf 	bl	8007c00 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	799b      	ldrb	r3, [r3, #6]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d13b      	bne.n	8002102 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3338      	adds	r3, #56	@ 0x38
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4403      	add	r3, r0
 80020aa:	3328      	adds	r3, #40	@ 0x28
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	440b      	add	r3, r1
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4403      	add	r3, r0
 80020c0:	3328      	adds	r3, #40	@ 0x28
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8470 	beq.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	333c      	adds	r3, #60	@ 0x3c
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	333c      	adds	r3, #60	@ 0x3c
 80020fa:	4602      	mov	r2, r0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	f000 bc58 	b.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	333c      	adds	r3, #60	@ 0x3c
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	333c      	adds	r3, #60	@ 0x3c
 800212a:	4602      	mov	r2, r0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	f000 bc40 	b.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f002 fcf5 	bl	8004b2a <USB_ReadChInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d131      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	331a      	adds	r3, #26
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f040 841f 	bne.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	331b      	adds	r3, #27
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	334d      	adds	r3, #77	@ 0x4d
 8002198:	2203      	movs	r2, #3
 800219a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fa08 	bl	80055ba <USB_HC_Halt>
 80021aa:	f000 bc02 	b.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fcb7 	bl	8004b2a <USB_ReadChInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	f040 8305 	bne.w	80027d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	2302      	movs	r3, #2
 80021d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	334d      	adds	r3, #77	@ 0x4d
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d114      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	334d      	adds	r3, #77	@ 0x4d
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	334c      	adds	r3, #76	@ 0x4c
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e2cc      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	334d      	adds	r3, #77	@ 0x4d
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d114      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334d      	adds	r3, #77	@ 0x4d
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334c      	adds	r3, #76	@ 0x4c
 8002254:	2205      	movs	r2, #5
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e2ac      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	334d      	adds	r3, #77	@ 0x4d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b07      	cmp	r3, #7
 800226e:	d00b      	beq.n	8002288 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	334d      	adds	r3, #77	@ 0x4d
 8002280:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002282:	2b09      	cmp	r3, #9
 8002284:	f040 80a6 	bne.w	80023d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	334d      	adds	r3, #77	@ 0x4d
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3344      	adds	r3, #68	@ 0x44
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1c59      	adds	r1, r3, #1
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4403      	add	r3, r0
 80022bc:	3344      	adds	r3, #68	@ 0x44
 80022be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3344      	adds	r3, #68	@ 0x44
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d943      	bls.n	800235e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3344      	adds	r3, #68	@ 0x44
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	331a      	adds	r3, #26
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d123      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	331b      	adds	r3, #27
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	331c      	adds	r3, #28
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	0151      	lsls	r1, r2, #5
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	440a      	add	r2, r1
 800233e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334c      	adds	r3, #76	@ 0x4c
 8002358:	2204      	movs	r2, #4
 800235a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800235c:	e229      	b.n	80027b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	334c      	adds	r3, #76	@ 0x4c
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3326      	adds	r3, #38	@ 0x26
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	3326      	adds	r3, #38	@ 0x26
 8002398:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 8209 	bne.w	80027b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023d2:	e1ee      	b.n	80027b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334d      	adds	r3, #77	@ 0x4d
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	f040 80c8 	bne.w	800257c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334d      	adds	r3, #77	@ 0x4d
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	331b      	adds	r3, #27
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 81ce 	bne.w	80027b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3326      	adds	r3, #38	@ 0x26
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d16b      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3348      	adds	r3, #72	@ 0x48
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c59      	adds	r1, r3, #1
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	3348      	adds	r3, #72	@ 0x48
 8002450:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3348      	adds	r3, #72	@ 0x48
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d943      	bls.n	80024f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3348      	adds	r3, #72	@ 0x48
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	331b      	adds	r3, #27
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3344      	adds	r3, #68	@ 0x44
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d809      	bhi.n	80024ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	331c      	adds	r3, #28
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334c      	adds	r3, #76	@ 0x4c
 80024ea:	2204      	movs	r2, #4
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e014      	b.n	800251a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	334c      	adds	r3, #76	@ 0x4c
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e009      	b.n	800251a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334c      	adds	r3, #76	@ 0x4c
 8002516:	2202      	movs	r2, #2
 8002518:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3326      	adds	r3, #38	@ 0x26
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3326      	adds	r3, #38	@ 0x26
 8002540:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002542:	2b02      	cmp	r3, #2
 8002544:	f040 8136 	bne.w	80027b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800255e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002566:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e11b      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	334d      	adds	r3, #77	@ 0x4d
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	f040 8081 	bne.w	8002696 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	@ 0x4d
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	331b      	adds	r3, #27
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	f040 80fa 	bne.w	80027b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	334c      	adds	r3, #76	@ 0x4c
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	0151      	lsls	r1, r2, #5
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	440a      	add	r2, r1
 800260a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800260e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002612:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	440a      	add	r2, r1
 800262a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800262e:	f023 0320 	bic.w	r3, r3, #32
 8002632:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3326      	adds	r3, #38	@ 0x26
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3326      	adds	r3, #38	@ 0x26
 800265a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800265c:	2b02      	cmp	r3, #2
 800265e:	f040 80a9 	bne.w	80027b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002678:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002680:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e08e      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	334d      	adds	r3, #77	@ 0x4d
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d143      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	334d      	adds	r3, #77	@ 0x4d
 80026bc:	2202      	movs	r2, #2
 80026be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	334c      	adds	r3, #76	@ 0x4c
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3326      	adds	r3, #38	@ 0x26
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3326      	adds	r3, #38	@ 0x26
 80026fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d159      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002716:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800271e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e03f      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334d      	adds	r3, #77	@ 0x4d
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d126      	bne.n	8002798 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334d      	adds	r3, #77	@ 0x4d
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3344      	adds	r3, #68	@ 0x44
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4403      	add	r3, r0
 800277e:	3344      	adds	r3, #68	@ 0x44
 8002780:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	334c      	adds	r3, #76	@ 0x4c
 8002792:	2204      	movs	r2, #4
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e00d      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	@ 0x4d
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f000 8100 	beq.w	80029b0 <HCD_HC_IN_IRQHandler+0xcca>
 80027b0:	e000      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	334c      	adds	r3, #76	@ 0x4c
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f005 fa18 	bl	8007c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027d0:	e0ef      	b.n	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f9a5 	bl	8004b2a <USB_ReadChInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b40      	cmp	r3, #64	@ 0x40
 80027e8:	d12f      	bne.n	800284a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2340      	movs	r3, #64	@ 0x40
 80027fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	2205      	movs	r2, #5
 800280e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	331a      	adds	r3, #26
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3344      	adds	r3, #68	@ 0x44
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 feb9 	bl	80055ba <USB_HC_Halt>
 8002848:	e0b3      	b.n	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 f969 	bl	8004b2a <USB_ReadChInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b10      	cmp	r3, #16
 8002860:	f040 80a7 	bne.w	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3326      	adds	r3, #38	@ 0x26
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d11b      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3344      	adds	r3, #68	@ 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	334d      	adds	r3, #77	@ 0x4d
 800289e:	2204      	movs	r2, #4
 80028a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fe85 	bl	80055ba <USB_HC_Halt>
 80028b0:	e03f      	b.n	8002932 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3326      	adds	r3, #38	@ 0x26
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3326      	adds	r3, #38	@ 0x26
 80028d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d129      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3344      	adds	r3, #68	@ 0x44
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	799b      	ldrb	r3, [r3, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HCD_HC_IN_IRQHandler+0xc2a>
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	331b      	adds	r3, #27
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d110      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	334d      	adds	r3, #77	@ 0x4d
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fe44 	bl	80055ba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	331b      	adds	r3, #27
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d129      	bne.n	800299c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	331b      	adds	r3, #27
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	440a      	add	r2, r1
 8002972:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	0151      	lsls	r1, r2, #5
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	440a      	add	r2, r1
 8002992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002996:	f043 0320 	orr.w	r3, r3, #32
 800299a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
 80029ae:	e000      	b.n	80029b2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029b0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 f8a7 	bl	8004b2a <USB_ReadChInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d11b      	bne.n	8002a1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f2:	461a      	mov	r2, r3
 80029f4:	2304      	movs	r3, #4
 80029f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	334d      	adds	r3, #77	@ 0x4d
 8002a08:	2207      	movs	r2, #7
 8002a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fdd0 	bl	80055ba <USB_HC_Halt>
 8002a1a:	f000 bc89 	b.w	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f87f 	bl	8004b2a <USB_ReadChInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 8082 	bne.w	8002b3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a44:	461a      	mov	r2, r3
 8002a46:	2320      	movs	r3, #32
 8002a48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3319      	adds	r3, #25
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d124      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3319      	adds	r3, #25
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334c      	adds	r3, #76	@ 0x4c
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334d      	adds	r3, #77	@ 0x4d
 8002a98:	2203      	movs	r2, #3
 8002a9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fd88 	bl	80055ba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	331a      	adds	r3, #26
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 8437 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x978>
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	331b      	adds	r3, #27
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 842b 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3326      	adds	r3, #38	@ 0x26
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d009      	beq.n	8002b04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	331b      	adds	r3, #27
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	334d      	adds	r3, #77	@ 0x4d
 8002b14:	2203      	movs	r2, #3
 8002b16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fd4a 	bl	80055ba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3344      	adds	r3, #68	@ 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e3f9      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 fff0 	bl	8004b2a <USB_ReadChInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b54:	d111      	bne.n	8002b7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fd21 	bl	80055ba <USB_HC_Halt>
 8002b78:	e3da      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 ffd1 	bl	8004b2a <USB_ReadChInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d168      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3344      	adds	r3, #68	@ 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 ffbb 	bl	8004b2a <USB_ReadChInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	d112      	bne.n	8002be4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3319      	adds	r3, #25
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	2340      	movs	r3, #64	@ 0x40
 8002be2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d019      	beq.n	8002c2e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331b      	adds	r3, #27
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334d      	adds	r3, #77	@ 0x4d
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fcac 	bl	80055ba <USB_HC_Halt>
 8002c62:	e365      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 ff5c 	bl	8004b2a <USB_ReadChInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b40      	cmp	r3, #64	@ 0x40
 8002c7a:	d139      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	331a      	adds	r3, #26
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3319      	adds	r3, #25
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fc6f 	bl	80055ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2340      	movs	r3, #64	@ 0x40
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e31f      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 ff16 	bl	8004b2a <USB_ReadChInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11a      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2308      	movs	r3, #8
 8002d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334d      	adds	r3, #77	@ 0x4d
 8002d2a:	2206      	movs	r2, #6
 8002d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 fc3f 	bl	80055ba <USB_HC_Halt>
 8002d3c:	e2f8      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 feef 	bl	8004b2a <USB_ReadChInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d144      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3344      	adds	r3, #68	@ 0x44
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334d      	adds	r3, #77	@ 0x4d
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3319      	adds	r3, #25
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d114      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3318      	adds	r3, #24
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3319      	adds	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fbf7 	bl	80055ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2310      	movs	r3, #16
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e2a7      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fe9e 	bl	8004b2a <USB_ReadChInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df4:	2b80      	cmp	r3, #128	@ 0x80
 8002df6:	f040 8083 	bne.w	8002f00 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	799b      	ldrb	r3, [r3, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d111      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	334d      	adds	r3, #77	@ 0x4d
 8002e12:	2207      	movs	r2, #7
 8002e14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fbcb 	bl	80055ba <USB_HC_Halt>
 8002e24:	e062      	b.n	8002eec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3344      	adds	r3, #68	@ 0x44
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	3344      	adds	r3, #68	@ 0x44
 8002e48:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3344      	adds	r3, #68	@ 0x44
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d922      	bls.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3344      	adds	r3, #68	@ 0x44
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	334c      	adds	r3, #76	@ 0x4c
 8002e84:	2204      	movs	r2, #4
 8002e86:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334c      	adds	r3, #76	@ 0x4c
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f004 feae 	bl	8007c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ea4:	e022      	b.n	8002eec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334c      	adds	r3, #76	@ 0x4c
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ed0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ed8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	6093      	str	r3, [r2, #8]
 8002efe:	e217      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fe0e 	bl	8004b2a <USB_ReadChInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f18:	d11b      	bne.n	8002f52 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334d      	adds	r3, #77	@ 0x4d
 8002f2a:	2209      	movs	r2, #9
 8002f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fb3f 	bl	80055ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f4e:	6093      	str	r3, [r2, #8]
 8002f50:	e1ee      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fde5 	bl	8004b2a <USB_ReadChInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	f040 81df 	bne.w	800332a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334d      	adds	r3, #77	@ 0x4d
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 8093 	bne.w	80030bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	334d      	adds	r3, #77	@ 0x4d
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	334c      	adds	r3, #76	@ 0x4c
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3326      	adds	r3, #38	@ 0x26
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d00b      	beq.n	8002fec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3326      	adds	r3, #38	@ 0x26
 8002fe4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	f040 8190 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	799b      	ldrb	r3, [r3, #6]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	333d      	adds	r3, #61	@ 0x3d
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2d8      	uxtb	r0, r3
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333d      	adds	r3, #61	@ 0x3d
 800301c:	4602      	mov	r2, r0
 800301e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	799b      	ldrb	r3, [r3, #6]
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 8171 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3334      	adds	r3, #52	@ 0x34
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8165 	beq.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3334      	adds	r3, #52	@ 0x34
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	3328      	adds	r3, #40	@ 0x28
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	440b      	add	r3, r1
 8003068:	1e59      	subs	r1, r3, #1
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4403      	add	r3, r0
 8003078:	3328      	adds	r3, #40	@ 0x28
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003080:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 813f 	beq.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	333d      	adds	r3, #61	@ 0x3d
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333d      	adds	r3, #61	@ 0x3d
 80030b6:	4602      	mov	r2, r0
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e127      	b.n	800330c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334d      	adds	r3, #77	@ 0x4d
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d120      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	334d      	adds	r3, #77	@ 0x4d
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	331b      	adds	r3, #27
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 8107 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334c      	adds	r3, #76	@ 0x4c
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e0fb      	b.n	800330c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334d      	adds	r3, #77	@ 0x4d
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d13a      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	@ 0x4c
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	331b      	adds	r3, #27
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 80d1 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	331b      	adds	r3, #27
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	0151      	lsls	r1, r2, #5
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	440a      	add	r2, r1
 8003194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319c:	6053      	str	r3, [r2, #4]
 800319e:	e0b5      	b.n	800330c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	@ 0x4d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d114      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334d      	adds	r3, #77	@ 0x4d
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334c      	adds	r3, #76	@ 0x4c
 80031da:	2202      	movs	r2, #2
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e095      	b.n	800330c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	@ 0x4d
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d114      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334c      	adds	r3, #76	@ 0x4c
 800321a:	2205      	movs	r2, #5
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e075      	b.n	800330c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b07      	cmp	r3, #7
 8003234:	d00a      	beq.n	800324c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003248:	2b09      	cmp	r3, #9
 800324a:	d170      	bne.n	800332e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334d      	adds	r3, #77	@ 0x4d
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3344      	adds	r3, #68	@ 0x44
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4403      	add	r3, r0
 8003280:	3344      	adds	r3, #68	@ 0x44
 8003282:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3344      	adds	r3, #68	@ 0x44
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d914      	bls.n	80032c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3344      	adds	r3, #68	@ 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334c      	adds	r3, #76	@ 0x4c
 80032be:	2204      	movs	r2, #4
 80032c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032c2:	e022      	b.n	800330a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334c      	adds	r3, #76	@ 0x4c
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800330a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334c      	adds	r3, #76	@ 0x4c
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f004 fc6c 	bl	8007c00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003328:	e002      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800332e:	bf00      	nop
  }
}
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08a      	sub	sp, #40	@ 0x28
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d004      	beq.n	800337c <HCD_RXQLVL_IRQHandler+0x46>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b05      	cmp	r3, #5
 8003376:	f000 80b6 	beq.w	80034e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800337a:	e0b7      	b.n	80034ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80b3 	beq.w	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	332c      	adds	r3, #44	@ 0x2c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80a7 	beq.w	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3338      	adds	r3, #56	@ 0x38
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	18d1      	adds	r1, r2, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4403      	add	r3, r0
 80033c0:	3334      	adds	r3, #52	@ 0x34
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4299      	cmp	r1, r3
 80033c6:	f200 8083 	bhi.w	80034d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	332c      	adds	r3, #44	@ 0x2c
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	b292      	uxth	r2, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	f001 fb35 	bl	8004a54 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	332c      	adds	r3, #44	@ 0x2c
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	18d1      	adds	r1, r2, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4403      	add	r3, r0
 800340e:	332c      	adds	r3, #44	@ 0x2c
 8003410:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3338      	adds	r3, #56	@ 0x38
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	18d1      	adds	r1, r2, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	3338      	adds	r3, #56	@ 0x38
 8003438:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	0cdb      	lsrs	r3, r3, #19
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3328      	adds	r3, #40	@ 0x28
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4293      	cmp	r3, r2
 8003468:	d13f      	bne.n	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03c      	beq.n	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	333c      	adds	r3, #60	@ 0x3c
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f083 0301 	eor.w	r3, r3, #1
 80034b8:	b2d8      	uxtb	r0, r3
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	333c      	adds	r3, #60	@ 0x3c
 80034ca:	4602      	mov	r2, r0
 80034cc:	701a      	strb	r2, [r3, #0]
      break;
 80034ce:	e00c      	b.n	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334c      	adds	r3, #76	@ 0x4c
 80034e0:	2204      	movs	r2, #4
 80034e2:	701a      	strb	r2, [r3, #0]
      break;
 80034e4:	e001      	b.n	80034ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034ea:	bf00      	nop
  }
}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	@ 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003520:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d10b      	bne.n	8003544 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f004 fb46 	bl	8007bc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b08      	cmp	r3, #8
 800354c:	d132      	bne.n	80035b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f043 0308 	orr.w	r3, r3, #8
 8003554:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d126      	bne.n	80035ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7a5b      	ldrb	r3, [r3, #9]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d113      	bne.n	8003590 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800356e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003572:	d106      	bne.n	8003582 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fbea 	bl	8004d54 <USB_InitFSLSPClkSel>
 8003580:	e011      	b.n	80035a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fbe3 	bl	8004d54 <USB_InitFSLSPClkSel>
 800358e:	e00a      	b.n	80035a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	79db      	ldrb	r3, [r3, #7]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800359e:	461a      	mov	r2, r3
 80035a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80035a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f004 fb38 	bl	8007c1c <HAL_HCD_PortEnabled_Callback>
 80035ac:	e002      	b.n	80035b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f004 fb42 	bl	8007c38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d103      	bne.n	80035c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f043 0320 	orr.w	r3, r3, #32
 80035c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6013      	str	r3, [r2, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e267      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d075      	beq.n	80036e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d00c      	beq.n	8003620 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b85      	ldr	r3, [pc, #532]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800360e:	2b08      	cmp	r3, #8
 8003610:	d112      	bne.n	8003638 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b82      	ldr	r3, [pc, #520]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800361e:	d10b      	bne.n	8003638 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	4b7e      	ldr	r3, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05b      	beq.n	80036e4 <HAL_RCC_OscConfig+0x108>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d157      	bne.n	80036e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e242      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003640:	d106      	bne.n	8003650 <HAL_RCC_OscConfig+0x74>
 8003642:	4b76      	ldr	r3, [pc, #472]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e01d      	b.n	800368c <HAL_RCC_OscConfig+0xb0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x98>
 800365a:	4b70      	ldr	r3, [pc, #448]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6f      	ldr	r2, [pc, #444]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b6d      	ldr	r3, [pc, #436]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6c      	ldr	r2, [pc, #432]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0xb0>
 8003674:	4b69      	ldr	r3, [pc, #420]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a68      	ldr	r2, [pc, #416]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b66      	ldr	r3, [pc, #408]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a65      	ldr	r2, [pc, #404]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800368a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fb8e 	bl	8000db4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fd fb8a 	bl	8000db4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	@ 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e207      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b5b      	ldr	r3, [pc, #364]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0xc0>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fd fb7a 	bl	8000db4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fd fb76 	bl	8000db4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	@ 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1f3      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	4b51      	ldr	r3, [pc, #324]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0xe8>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d063      	beq.n	80037ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b47      	ldr	r3, [pc, #284]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003706:	2b08      	cmp	r3, #8
 8003708:	d11c      	bne.n	8003744 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b44      	ldr	r3, [pc, #272]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d116      	bne.n	8003744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	4b41      	ldr	r3, [pc, #260]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x152>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e1c7      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4937      	ldr	r1, [pc, #220]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	e03a      	b.n	80037ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374c:	4b34      	ldr	r3, [pc, #208]	@ (8003820 <HAL_RCC_OscConfig+0x244>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd fb2f 	bl	8000db4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fd fb2b 	bl	8000db4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1a8      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b28      	ldr	r3, [pc, #160]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4925      	ldr	r1, [pc, #148]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	e015      	b.n	80037ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378e:	4b24      	ldr	r3, [pc, #144]	@ (8003820 <HAL_RCC_OscConfig+0x244>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fb0e 	bl	8000db4 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	f7fd fb0a 	bl	8000db4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e187      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d036      	beq.n	8003834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ce:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCC_OscConfig+0x248>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fd faee 	bl	8000db4 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037dc:	f7fd faea 	bl	8000db4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e167      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ee:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x200>
 80037fa:	e01b      	b.n	8003834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCC_OscConfig+0x248>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fd fad7 	bl	8000db4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	e00e      	b.n	8003828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fd fad3 	bl	8000db4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d907      	bls.n	8003828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e150      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	42470000 	.word	0x42470000
 8003824:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800382a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8097 	beq.w	8003970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b81      	ldr	r3, [pc, #516]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	4b7d      	ldr	r3, [pc, #500]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	@ 0x40
 8003862:	4b7a      	ldr	r3, [pc, #488]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b77      	ldr	r3, [pc, #476]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b74      	ldr	r3, [pc, #464]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a73      	ldr	r2, [pc, #460]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fd fa93 	bl	8000db4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd fa8f 	bl	8000db4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e10c      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x2ea>
 80038b8:	4b64      	ldr	r3, [pc, #400]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a63      	ldr	r2, [pc, #396]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x324>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x30c>
 80038ce:	4b5f      	ldr	r3, [pc, #380]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	4b5c      	ldr	r3, [pc, #368]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	4a5b      	ldr	r2, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x324>
 80038e8:	4b58      	ldr	r3, [pc, #352]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	4a54      	ldr	r2, [pc, #336]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fd fa54 	bl	8000db4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fd fa50 	bl	8000db4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0cb      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	4b49      	ldr	r3, [pc, #292]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ee      	beq.n	8003910 <HAL_RCC_OscConfig+0x334>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003934:	f7fd fa3e 	bl	8000db4 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fd fa3a 	bl	8000db4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0b5      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003952:	4b3e      	ldr	r3, [pc, #248]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ee      	bne.n	800393c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	4a38      	ldr	r2, [pc, #224]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a1 	beq.w	8003abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800397a:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d05c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d141      	bne.n	8003a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd fa0e 	bl	8000db4 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fa0a 	bl	8000db4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e087      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	3b01      	subs	r3, #1
 80039d4:	041b      	lsls	r3, r3, #16
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	491b      	ldr	r1, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd f9e3 	bl	8000db4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd f9df 	bl	8000db4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e05c      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a10:	e054      	b.n	8003abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd f9cc 	bl	8000db4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fd f9c8 	bl	8000db4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e045      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x444>
 8003a3e:	e03d      	b.n	8003abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e038      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x4ec>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d121      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11a      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cc      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b68      	ldr	r3, [pc, #416]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d90c      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b65      	ldr	r3, [pc, #404]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0b8      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b20:	4b59      	ldr	r3, [pc, #356]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a58      	ldr	r2, [pc, #352]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b38:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a52      	ldr	r2, [pc, #328]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b50      	ldr	r3, [pc, #320]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	494d      	ldr	r1, [pc, #308]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d044      	beq.n	8003bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d119      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e06f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e067      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003baa:	4b37      	ldr	r3, [pc, #220]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4934      	ldr	r1, [pc, #208]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7fd f8fa 	bl	8000db4 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7fd f8f6 	bl	8000db4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 020c 	and.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1eb      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d20c      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b22      	ldr	r3, [pc, #136]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e032      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4916      	ldr	r1, [pc, #88]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3e:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	490e      	ldr	r1, [pc, #56]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c52:	f000 f821 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	490a      	ldr	r1, [pc, #40]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	5ccb      	ldrb	r3, [r1, r3]
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f85a 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023c00 	.word	0x40023c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	080082f4 	.word	0x080082f4
 8003c90:	20000000 	.word	0x20000000
 8003c94:	20000004 	.word	0x20000004

08003c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b094      	sub	sp, #80	@ 0x50
 8003c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb0:	4b79      	ldr	r3, [pc, #484]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d00d      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	f200 80e1 	bhi.w	8003e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x34>
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cca:	e0db      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b73      	ldr	r3, [pc, #460]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd0:	e0db      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cd2:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd6:	e0d8      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cee:	4b6a      	ldr	r3, [pc, #424]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	462b      	mov	r3, r5
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1c:	0150      	lsls	r0, r2, #5
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4621      	mov	r1, r4
 8003d24:	1a51      	subs	r1, r2, r1
 8003d26:	6139      	str	r1, [r7, #16]
 8003d28:	4629      	mov	r1, r5
 8003d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	018b      	lsls	r3, r1, #6
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d46:	4651      	mov	r1, sl
 8003d48:	018a      	lsls	r2, r1, #6
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d50:	4659      	mov	r1, fp
 8003d52:	eb63 0901 	sbc.w	r9, r3, r1
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6a:	4690      	mov	r8, r2
 8003d6c:	4699      	mov	r9, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	eb18 0303 	adds.w	r3, r8, r3
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	462b      	mov	r3, r5
 8003d78:	eb49 0303 	adc.w	r3, r9, r3
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	024b      	lsls	r3, r1, #9
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d94:	4621      	mov	r1, r4
 8003d96:	024a      	lsls	r2, r1, #9
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003da8:	f7fc fa16 	bl	80001d8 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db4:	e058      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b38      	ldr	r3, [pc, #224]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	0159      	lsls	r1, r3, #5
 8003dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de2:	0150      	lsls	r0, r2, #5
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4641      	mov	r1, r8
 8003dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dee:	4649      	mov	r1, r9
 8003df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e08:	ebb2 040a 	subs.w	r4, r2, sl
 8003e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	00eb      	lsls	r3, r5, #3
 8003e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1e:	00e2      	lsls	r2, r4, #3
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	18e3      	adds	r3, r4, r3
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	eb45 0303 	adc.w	r3, r5, r3
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3e:	4629      	mov	r1, r5
 8003e40:	028b      	lsls	r3, r1, #10
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e48:	4621      	mov	r1, r4
 8003e4a:	028a      	lsls	r2, r1, #10
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	2200      	movs	r2, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	61fa      	str	r2, [r7, #28]
 8003e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5c:	f7fc f9bc 	bl	80001d8 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e82:	e002      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3750      	adds	r7, #80	@ 0x50
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e041      	b.n	8003f3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fe04 	bl	8000ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 f9a0 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x24>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e022      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d109      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x3e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e015      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start+0x58>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e008      	b.n	8003fae <HAL_TIM_PWM_Start+0x6a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e068      	b.n	8004088 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0x82>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	e013      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x92>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd4:	e00b      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0xa2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe4:	e003      	b.n	8003fee <HAL_TIM_PWM_Start+0xaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fb28 	bl	800464c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_TIM_PWM_Start+0x14c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d107      	bne.n	8004016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <HAL_TIM_PWM_Start+0x14c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d018      	beq.n	8004052 <HAL_TIM_PWM_Start+0x10e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d013      	beq.n	8004052 <HAL_TIM_PWM_Start+0x10e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_TIM_PWM_Start+0x150>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIM_PWM_Start+0x10e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_TIM_PWM_Start+0x154>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIM_PWM_Start+0x10e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_TIM_PWM_Start+0x158>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIM_PWM_Start+0x10e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <HAL_TIM_PWM_Start+0x15c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d010      	beq.n	8004086 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	e007      	b.n	8004086 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40014000 	.word	0x40014000

080040a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0ae      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b0c      	cmp	r3, #12
 80040ce:	f200 809f 	bhi.w	8004210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040d2:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	08004211 	.word	0x08004211
 80040e0:	08004211 	.word	0x08004211
 80040e4:	08004211 	.word	0x08004211
 80040e8:	0800414d 	.word	0x0800414d
 80040ec:	08004211 	.word	0x08004211
 80040f0:	08004211 	.word	0x08004211
 80040f4:	08004211 	.word	0x08004211
 80040f8:	0800418f 	.word	0x0800418f
 80040fc:	08004211 	.word	0x08004211
 8004100:	08004211 	.word	0x08004211
 8004104:	08004211 	.word	0x08004211
 8004108:	080041cf 	.word	0x080041cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f90e 	bl	8004334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0208 	orr.w	r2, r2, #8
 8004126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6999      	ldr	r1, [r3, #24]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	619a      	str	r2, [r3, #24]
      break;
 800414a:	e064      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f954 	bl	8004400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6999      	ldr	r1, [r3, #24]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	619a      	str	r2, [r3, #24]
      break;
 800418c:	e043      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f99f 	bl	80044d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0208 	orr.w	r2, r2, #8
 80041a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0204 	bic.w	r2, r2, #4
 80041b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69d9      	ldr	r1, [r3, #28]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	61da      	str	r2, [r3, #28]
      break;
 80041cc:	e023      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f9e9 	bl	80045ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69d9      	ldr	r1, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	021a      	lsls	r2, r3, #8
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	61da      	str	r2, [r3, #28]
      break;
 800420e:	e002      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      break;
 8004214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a37      	ldr	r2, [pc, #220]	@ (8004318 <TIM_Base_SetConfig+0xf0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a34      	ldr	r2, [pc, #208]	@ (800431c <TIM_Base_SetConfig+0xf4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a33      	ldr	r2, [pc, #204]	@ (8004320 <TIM_Base_SetConfig+0xf8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a32      	ldr	r2, [pc, #200]	@ (8004324 <TIM_Base_SetConfig+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a28      	ldr	r2, [pc, #160]	@ (8004318 <TIM_Base_SetConfig+0xf0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01b      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004280:	d017      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	@ (800431c <TIM_Base_SetConfig+0xf4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a24      	ldr	r2, [pc, #144]	@ (8004320 <TIM_Base_SetConfig+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00f      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	@ (8004324 <TIM_Base_SetConfig+0xfc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a22      	ldr	r2, [pc, #136]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a21      	ldr	r2, [pc, #132]	@ (800432c <TIM_Base_SetConfig+0x104>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a20      	ldr	r2, [pc, #128]	@ (8004330 <TIM_Base_SetConfig+0x108>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <TIM_Base_SetConfig+0xf0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d103      	bne.n	80042f2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 0201 	bic.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <TIM_OC1_SetConfig+0xc8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10c      	bne.n	80043aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0308 	bic.w	r3, r3, #8
 8004396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <TIM_OC1_SetConfig+0xc8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40010000 	.word	0x40010000

08004400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f023 0210 	bic.w	r2, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <TIM_OC2_SetConfig+0xd4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10d      	bne.n	800447c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800447a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a15      	ldr	r2, [pc, #84]	@ (80044d4 <TIM_OC2_SetConfig+0xd4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d113      	bne.n	80044ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800448a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000

080044d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <TIM_OC3_SetConfig+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10d      	bne.n	8004552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800453c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <TIM_OC3_SetConfig+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d113      	bne.n	8004582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40010000 	.word	0x40010000

080045ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a10      	ldr	r2, [pc, #64]	@ (8004648 <TIM_OC4_SetConfig+0x9c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d109      	bne.n	8004620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000

0800464c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2201      	movs	r2, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	43db      	mvns	r3, r3
 800466e:	401a      	ands	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e050      	b.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d013      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a15      	ldr	r2, [pc, #84]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10c      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800472c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4313      	orrs	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40014000 	.word	0x40014000

08004774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004774:	b084      	sub	sp, #16
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	f107 001c 	add.w	r0, r7, #28
 8004782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004786:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800478a:	2b01      	cmp	r3, #1
 800478c:	d123      	bne.n	80047d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f9dc 	bl	8004b88 <USB_CoreReset>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e01b      	b.n	800480e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9d0 	bl	8004b88 <USB_CoreReset>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8004800:	e005      	b.n	800480e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800480e:	7fbb      	ldrb	r3, [r7, #30]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10b      	bne.n	800482c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f043 0206 	orr.w	r2, r3, #6
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr

0800483c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d115      	bne.n	80048ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048ae:	200a      	movs	r0, #10
 80048b0:	f7fc fa8c 	bl	8000dcc <HAL_Delay>
      ms += 10U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	330a      	adds	r3, #10
 80048b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f956 	bl	8004b6c <USB_GetMode>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d01e      	beq.n	8004904 <USB_SetCurrentMode+0x84>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80048ca:	d9f0      	bls.n	80048ae <USB_SetCurrentMode+0x2e>
 80048cc:	e01a      	b.n	8004904 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d115      	bne.n	8004900 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048e0:	200a      	movs	r0, #10
 80048e2:	f7fc fa73 	bl	8000dcc <HAL_Delay>
      ms += 10U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	330a      	adds	r3, #10
 80048ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f93d 	bl	8004b6c <USB_GetMode>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <USB_SetCurrentMode+0x84>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80048fc:	d9f0      	bls.n	80048e0 <USB_SetCurrentMode+0x60>
 80048fe:	e001      	b.n	8004904 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e005      	b.n	8004910 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2bc8      	cmp	r3, #200	@ 0xc8
 8004908:	d101      	bne.n	800490e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3301      	adds	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004932:	d901      	bls.n	8004938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e01b      	b.n	8004970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	daf2      	bge.n	8004926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	019b      	lsls	r3, r3, #6
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800495c:	d901      	bls.n	8004962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e006      	b.n	8004970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d0f0      	beq.n	8004950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e018      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	daf2      	bge.n	8004988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2210      	movs	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049b8:	d901      	bls.n	80049be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d0f0      	beq.n	80049ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	@ 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	460b      	mov	r3, r1
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d123      	bne.n	8004a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049fe:	88bb      	ldrh	r3, [r7, #4]
 8004a00:	3303      	adds	r3, #3
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e018      	b.n	8004a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	031a      	lsls	r2, r3, #12
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a18:	461a      	mov	r2, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3e2      	bcc.n	8004a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3724      	adds	r7, #36	@ 0x24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b08b      	sub	sp, #44	@ 0x2c
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	089b      	lsrs	r3, r3, #2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e014      	b.n	8004aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	3301      	adds	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3e6      	bcc.n	8004a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ab2:	8bfb      	ldrh	r3, [r7, #30]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01e      	beq.n	8004af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004aea:	8bfb      	ldrh	r3, [r7, #30]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ea      	bne.n	8004acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	372c      	adds	r7, #44	@ 0x2c
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0301 	and.w	r3, r3, #1
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba0:	d901      	bls.n	8004ba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e022      	b.n	8004bec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	daf2      	bge.n	8004b94 <USB_CoreReset+0xc>

  count = 10U;
 8004bae:	230a      	movs	r3, #10
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004bb2:	e002      	b.n	8004bba <USB_CoreReset+0x32>
  {
    count--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f9      	bne.n	8004bb4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bd8:	d901      	bls.n	8004bde <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e006      	b.n	8004bec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d0f0      	beq.n	8004bcc <USB_CoreReset+0x44>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d119      	bne.n	8004c82 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10a      	bne.n	8004c6c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e014      	b.n	8004c96 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c7a:	f023 0304 	bic.w	r3, r3, #4
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e009      	b.n	8004c96 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c96:	2110      	movs	r1, #16
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fe3d 	bl	8004918 <USB_FlushTxFifo>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fe67 	bl	800497c <USB_FlushRxFifo>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e015      	b.n	8004cea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004cee:	461a      	mov	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d3e3      	bcc.n	8004cbe <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004d02:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2280      	movs	r2, #128	@ 0x80
 8004d08:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <USB_HostInit+0x150>)
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0e      	ldr	r2, [pc, #56]	@ (8004d4c <USB_HostInit+0x154>)
 8004d14:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699a      	ldr	r2, [r3, #24]
 8004d30:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <USB_HostInit+0x158>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d44:	b004      	add	sp, #16
 8004d46:	4770      	bx	lr
 8004d48:	00600080 	.word	0x00600080
 8004d4c:	004000e0 	.word	0x004000e0
 8004d50:	a3200008 	.word	0xa3200008

08004d54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004da2:	6053      	str	r3, [r2, #4]
 8004da4:	e00c      	b.n	8004dc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d107      	bne.n	8004dbc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004db2:	461a      	mov	r2, r3
 8004db4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004db8:	6053      	str	r3, [r2, #4]
 8004dba:	e001      	b.n	8004dc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004dee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dfc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004dfe:	2064      	movs	r0, #100	@ 0x64
 8004e00:	f7fb ffe4 	bl	8000dcc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e10:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004e12:	200a      	movs	r0, #10
 8004e14:	f7fb ffda 	bl	8000dcc <HAL_Delay>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004e46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <USB_DriveVbus+0x44>
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e64:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e70:	d109      	bne.n	8004e86 <USB_DriveVbus+0x64>
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004e80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e84:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	0c5b      	lsrs	r3, r3, #17
 8004eb2:	f003 0303 	and.w	r3, r3, #3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	b29b      	uxth	r3, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	70fb      	strb	r3, [r7, #3]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	70bb      	strb	r3, [r7, #2]
 8004efa:	4613      	mov	r3, r2
 8004efc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f12:	461a      	mov	r2, r3
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295
 8004f18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d867      	bhi.n	8004ff2 <USB_HC_Init+0x10e>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <USB_HC_Init+0x44>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004fb5 	.word	0x08004fb5
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	08004f77 	.word	0x08004f77
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da51      	bge.n	8004ff8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f72:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004f74:	e040      	b.n	8004ff8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004f88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da34      	bge.n	8004ffc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb0:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004fb2:	e023      	b.n	8004ffc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f240 2325 	movw	r3, #549	@ 0x225
 8004fc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da17      	bge.n	8005000 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fea:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004fee:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ff0:	e006      	b.n	8005000 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	77fb      	strb	r3, [r7, #31]
      break;
 8004ff6:	e004      	b.n	8005002 <USB_HC_Init+0x11e>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e002      	b.n	8005002 <USB_HC_Init+0x11e>
      break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <USB_HC_Init+0x11e>
      break;
 8005000:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	440a      	add	r2, r1
 800502a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	6939      	ldr	r1, [r7, #16]
 800504a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800504e:	4313      	orrs	r3, r2
 8005050:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800505e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	da03      	bge.n	800506e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e001      	b.n	8005072 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ff0e 	bl	8004e94 <USB_GetHostSpeed>
 8005078:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800507a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800507e:	2b02      	cmp	r3, #2
 8005080:	d106      	bne.n	8005090 <USB_HC_Init+0x1ac>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d003      	beq.n	8005090 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e001      	b.n	8005094 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005094:	787b      	ldrb	r3, [r7, #1]
 8005096:	059b      	lsls	r3, r3, #22
 8005098:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800509c:	78bb      	ldrb	r3, [r7, #2]
 800509e:	02db      	lsls	r3, r3, #11
 80050a0:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050aa:	049b      	lsls	r3, r3, #18
 80050ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80050b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80050b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80050b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050b8:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	431a      	orrs	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80050ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050d2:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80050d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d003      	beq.n	80050e4 <USB_HC_Init+0x200>
 80050dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10f      	bne.n	8005104 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005102:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005104:	7ffb      	ldrb	r3, [r7, #31]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08c      	sub	sp, #48	@ 0x30
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800512c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	799b      	ldrb	r3, [r3, #6]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d158      	bne.n	80051e8 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005136:	2301      	movs	r3, #1
 8005138:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	78db      	ldrb	r3, [r3, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005142:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	8a92      	ldrh	r2, [r2, #20]
 8005148:	fb03 f202 	mul.w	r2, r3, r2
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61da      	str	r2, [r3, #28]
 8005150:	e079      	b.n	8005246 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	7c9b      	ldrb	r3, [r3, #18]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d130      	bne.n	80051bc <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005160:	d918      	bls.n	8005194 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	8a9b      	ldrh	r3, [r3, #20]
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d003      	beq.n	8005184 <USB_HC_StartXfer+0x74>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d103      	bne.n	800518c <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2202      	movs	r2, #2
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	e05c      	b.n	8005246 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2201      	movs	r2, #1
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e058      	b.n	8005246 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d007      	beq.n	80051b4 <USB_HC_StartXfer+0xa4>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d003      	beq.n	80051b4 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2204      	movs	r2, #4
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	e048      	b.n	8005246 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2203      	movs	r2, #3
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	e044      	b.n	8005246 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <USB_HC_StartXfer+0xce>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	8a92      	ldrh	r2, [r2, #20]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d907      	bls.n	80051de <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80051ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	8a92      	ldrh	r2, [r2, #20]
 80051d4:	fb03 f202 	mul.w	r2, r3, r2
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	e033      	b.n	8005246 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6a1a      	ldr	r2, [r3, #32]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61da      	str	r2, [r3, #28]
 80051e6:	e02e      	b.n	8005246 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d018      	beq.n	8005222 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	8a92      	ldrh	r2, [r2, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	3b01      	subs	r3, #1
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	8a92      	ldrh	r2, [r2, #20]
 8005200:	fbb3 f3f2 	udiv	r3, r3, r2
 8005204:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005206:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005208:	8b7b      	ldrh	r3, [r7, #26]
 800520a:	429a      	cmp	r2, r3
 800520c:	d90b      	bls.n	8005226 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800520e:	8b7b      	ldrh	r3, [r7, #26]
 8005210:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	8a92      	ldrh	r2, [r2, #20]
 8005218:	fb03 f202 	mul.w	r2, r3, r2
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61da      	str	r2, [r3, #28]
 8005220:	e001      	b.n	8005226 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005222:	2301      	movs	r3, #1
 8005224:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	78db      	ldrb	r3, [r3, #3]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800522e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	8a92      	ldrh	r2, [r2, #20]
 8005234:	fb03 f202 	mul.w	r2, r3, r2
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61da      	str	r2, [r3, #28]
 800523c:	e003      	b.n	8005246 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800524e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005250:	04d9      	lsls	r1, r3, #19
 8005252:	4ba4      	ldr	r3, [pc, #656]	@ (80054e4 <USB_HC_StartXfer+0x3d4>)
 8005254:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005256:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	7d9b      	ldrb	r3, [r3, #22]
 800525c:	075b      	lsls	r3, r3, #29
 800525e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	0148      	lsls	r0, r1, #5
 8005266:	6a39      	ldr	r1, [r7, #32]
 8005268:	4401      	add	r1, r0
 800526a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800526e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005270:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6999      	ldr	r1, [r3, #24]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005288:	460a      	mov	r2, r1
 800528a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80052c2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	7e7b      	ldrb	r3, [r7, #25]
 80052d4:	075b      	lsls	r3, r3, #29
 80052d6:	69f9      	ldr	r1, [r7, #28]
 80052d8:	0148      	lsls	r0, r1, #5
 80052da:	6a39      	ldr	r1, [r7, #32]
 80052dc:	4401      	add	r1, r0
 80052de:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	799b      	ldrb	r3, [r3, #6]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	f040 80c4 	bne.w	8005478 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	7c5b      	ldrb	r3, [r3, #17]
 80052f4:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80052fa:	4313      	orrs	r3, r2
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800530c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	440a      	add	r2, r1
 8005324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005328:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800532c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	79db      	ldrb	r3, [r3, #7]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d123      	bne.n	800537e <USB_HC_StartXfer+0x26e>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	78db      	ldrb	r3, [r3, #3]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11f      	bne.n	800537e <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800537c:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	7c9b      	ldrb	r3, [r3, #18]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d003      	beq.n	800538e <USB_HC_StartXfer+0x27e>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	7c9b      	ldrb	r3, [r3, #18]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d117      	bne.n	80053be <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005392:	2b01      	cmp	r3, #1
 8005394:	d113      	bne.n	80053be <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	78db      	ldrb	r3, [r3, #3]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10f      	bne.n	80053be <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053bc:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	7c9b      	ldrb	r3, [r3, #18]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d163      	bne.n	800548e <USB_HC_StartXfer+0x37e>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d15f      	bne.n	800548e <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d859      	bhi.n	800548c <USB_HC_StartXfer+0x37c>
 80053d8:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <USB_HC_StartXfer+0x2d0>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	08005413 	.word	0x08005413
 80053e8:	08005435 	.word	0x08005435
 80053ec:	08005457 	.word	0x08005457
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	6a3a      	ldr	r2, [r7, #32]
 8005404:	440a      	add	r2, r1
 8005406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800540a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540e:	6053      	str	r3, [r2, #4]
          break;
 8005410:	e03d      	b.n	800548e <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	440a      	add	r2, r1
 8005428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800542c:	f043 030e 	orr.w	r3, r3, #14
 8005430:	6053      	str	r3, [r2, #4]
          break;
 8005432:	e02c      	b.n	800548e <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	440a      	add	r2, r1
 800544a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800544e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005452:	6053      	str	r3, [r2, #4]
          break;
 8005454:	e01b      	b.n	800548e <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	440a      	add	r2, r1
 800546c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005474:	6053      	str	r3, [r2, #4]
          break;
 8005476:	e00a      	b.n	800548e <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	e000      	b.n	800548e <USB_HC_StartXfer+0x37e>
          break;
 800548c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054a4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	e003      	b.n	80054c0 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054be:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054c6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e055      	b.n	8005590 <USB_HC_StartXfer+0x480>
 80054e4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d14e      	bne.n	800558e <USB_HC_StartXfer+0x47e>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d04a      	beq.n	800558e <USB_HC_StartXfer+0x47e>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	79db      	ldrb	r3, [r3, #7]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d146      	bne.n	800558e <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	7c9b      	ldrb	r3, [r3, #18]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d831      	bhi.n	800556c <USB_HC_StartXfer+0x45c>
 8005508:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <USB_HC_StartXfer+0x400>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005521 	.word	0x08005521
 8005514:	08005545 	.word	0x08005545
 8005518:	08005521 	.word	0x08005521
 800551c:	08005545 	.word	0x08005545
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	3303      	adds	r3, #3
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800552a:	8afa      	ldrh	r2, [r7, #22]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	b29b      	uxth	r3, r3
 8005532:	429a      	cmp	r2, r3
 8005534:	d91c      	bls.n	8005570 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	619a      	str	r2, [r3, #24]
        }
        break;
 8005542:	e015      	b.n	8005570 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	3303      	adds	r3, #3
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800554e:	8afa      	ldrh	r2, [r7, #22]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	b29b      	uxth	r3, r3
 800555a:	429a      	cmp	r2, r3
 800555c:	d90a      	bls.n	8005574 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	619a      	str	r2, [r3, #24]
        }
        break;
 800556a:	e003      	b.n	8005574 <USB_HC_StartXfer+0x464>

      default:
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <USB_HC_StartXfer+0x466>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <USB_HC_StartXfer+0x466>
        break;
 8005574:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	785a      	ldrb	r2, [r3, #1]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	b29b      	uxth	r3, r3
 8005584:	2000      	movs	r0, #0
 8005586:	9000      	str	r0, [sp, #0]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fa25 	bl	80049d8 <USB_WritePacket>
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3728      	adds	r7, #40	@ 0x28
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	b29b      	uxth	r3, r3
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b089      	sub	sp, #36	@ 0x24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0c9b      	lsrs	r3, r3, #18
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	0fdb      	lsrs	r3, r3, #31
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0fdb      	lsrs	r3, r3, #31
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b20      	cmp	r3, #32
 800561e:	d10d      	bne.n	800563c <USB_HC_Halt+0x82>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <USB_HC_Halt+0x82>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d002      	beq.n	8005638 <USB_HC_Halt+0x7e>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d101      	bne.n	800563c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e0d8      	b.n	80057ee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <USB_HC_Halt+0x8e>
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d173      	bne.n	8005730 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005662:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005666:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d14a      	bne.n	800570a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d133      	bne.n	80056e8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800569a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800569e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056be:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056cc:	d82e      	bhi.n	800572c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e4:	d0ec      	beq.n	80056c0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056e6:	e081      	b.n	80057ec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005706:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005708:	e070      	b.n	80057ec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	440a      	add	r2, r1
 8005720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005728:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800572a:	e05f      	b.n	80057ec <USB_HC_Halt+0x232>
            break;
 800572c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800572e:	e05d      	b.n	80057ec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800574a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800574e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d133      	bne.n	80057c8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	440a      	add	r2, r1
 8005776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800577a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800577e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800579e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057ac:	d81d      	bhi.n	80057ea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d0ec      	beq.n	80057a0 <USB_HC_Halt+0x1e6>
 80057c6:	e011      	b.n	80057ec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e000      	b.n	80057ec <USB_HC_Halt+0x232>
          break;
 80057ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff f825 	bl	800485e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005814:	2110      	movs	r1, #16
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff f87e 	bl	8004918 <USB_FlushTxFifo>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff f8a8 	bl	800497c <USB_FlushRxFifo>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e01f      	b.n	800587c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005852:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800585a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005862:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3301      	adds	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d9dc      	bls.n	800583c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e034      	b.n	80058f2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800589e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058a6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058ae:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058bc:	461a      	mov	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ce:	d80c      	bhi.n	80058ea <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e6:	d0ec      	beq.n	80058c2 <USB_StopHost+0xc8>
 80058e8:	e000      	b.n	80058ec <USB_StopHost+0xf2>
        break;
 80058ea:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d9c7      	bls.n	8005888 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058fe:	461a      	mov	r2, r3
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe ff94 	bl	800483c <USB_EnableGlobalInt>

  return ret;
 8005914:	7ffb      	ldrb	r3, [r7, #31]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800591e:	b590      	push	{r4, r7, lr}
 8005920:	b089      	sub	sp, #36	@ 0x24
 8005922:	af04      	add	r7, sp, #16
 8005924:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005926:	2301      	movs	r3, #1
 8005928:	2202      	movs	r2, #2
 800592a:	2102      	movs	r1, #2
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc84 	bl	800623a <USBH_FindInterface>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2bff      	cmp	r3, #255	@ 0xff
 800593a:	d002      	beq.n	8005942 <USBH_CDC_InterfaceInit+0x24>
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d901      	bls.n	8005946 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005942:	2302      	movs	r3, #2
 8005944:	e13d      	b.n	8005bc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fc59 	bl	8006202 <USBH_SelectInterface>
 8005950:	4603      	mov	r3, r0
 8005952:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800595a:	2302      	movs	r3, #2
 800595c:	e131      	b.n	8005bc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005964:	2050      	movs	r0, #80	@ 0x50
 8005966:	f002 fb6b 	bl	8008040 <malloc>
 800596a:	4603      	mov	r3, r0
 800596c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800597e:	2302      	movs	r3, #2
 8005980:	e11f      	b.n	8005bc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005982:	2250      	movs	r2, #80	@ 0x50
 8005984:	2100      	movs	r1, #0
 8005986:	68b8      	ldr	r0, [r7, #8]
 8005988:	f002 fc18 	bl	80081bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	211a      	movs	r1, #26
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	b25b      	sxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	da15      	bge.n	80059d0 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	211a      	movs	r1, #26
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	211a      	movs	r1, #26
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80059ca:	881a      	ldrh	r2, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 ffc5 	bl	8007966 <USBH_AllocPipe>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	7819      	ldrb	r1, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	7858      	ldrb	r0, [r3, #1]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	8952      	ldrh	r2, [r2, #10]
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	2203      	movs	r2, #3
 8005a00:	9201      	str	r2, [sp, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4623      	mov	r3, r4
 8005a06:	4602      	mov	r2, r0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 ff7d 	bl	8007908 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f002 fa8c 	bl	8007f34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2200      	movs	r2, #0
 8005a20:	210a      	movs	r1, #10
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fc09 	bl	800623a <USBH_FindInterface>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2bff      	cmp	r3, #255	@ 0xff
 8005a30:	d002      	beq.n	8005a38 <USBH_CDC_InterfaceInit+0x11a>
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d901      	bls.n	8005a3c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e0c2      	b.n	8005bc2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	211a      	movs	r1, #26
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b25b      	sxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da16      	bge.n	8005a82 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	211a      	movs	r1, #26
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	211a      	movs	r1, #26
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005a7a:	881a      	ldrh	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	835a      	strh	r2, [r3, #26]
 8005a80:	e015      	b.n	8005aae <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	211a      	movs	r1, #26
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	211a      	movs	r1, #26
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	211a      	movs	r1, #26
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da16      	bge.n	8005af4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	211a      	movs	r1, #26
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	211a      	movs	r1, #26
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005aec:	881a      	ldrh	r2, [r3, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	835a      	strh	r2, [r3, #26]
 8005af2:	e015      	b.n	8005b20 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	211a      	movs	r1, #26
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	211a      	movs	r1, #26
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	7b9b      	ldrb	r3, [r3, #14]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 ff1d 	bl	8007966 <USBH_AllocPipe>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	7bdb      	ldrb	r3, [r3, #15]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 ff13 	bl	8007966 <USBH_AllocPipe>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	7b59      	ldrb	r1, [r3, #13]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	7b98      	ldrb	r0, [r3, #14]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	8b12      	ldrh	r2, [r2, #24]
 8005b60:	9202      	str	r2, [sp, #8]
 8005b62:	2202      	movs	r2, #2
 8005b64:	9201      	str	r2, [sp, #4]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4623      	mov	r3, r4
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fecb 	bl	8007908 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	7b19      	ldrb	r1, [r3, #12]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	7bd8      	ldrb	r0, [r3, #15]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	8b52      	ldrh	r2, [r2, #26]
 8005b8a:	9202      	str	r2, [sp, #8]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	9201      	str	r2, [sp, #4]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4623      	mov	r3, r4
 8005b94:	4602      	mov	r2, r0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f001 feb6 	bl	8007908 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	7b5b      	ldrb	r3, [r3, #13]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f002 f9c1 	bl	8007f34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	7b1b      	ldrb	r3, [r3, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f002 f9ba 	bl	8007f34 <USBH_LL_SetToggle>

  return USBH_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}

08005bca <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 feab 	bl	8007946 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fed6 	bl	80079a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	7b1b      	ldrb	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	7b1b      	ldrb	r3, [r3, #12]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fe98 	bl	8007946 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	7b1b      	ldrb	r3, [r3, #12]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fec3 	bl	80079a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	7b5b      	ldrb	r3, [r3, #13]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	7b5b      	ldrb	r3, [r3, #13]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fe85 	bl	8007946 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7b5b      	ldrb	r3, [r3, #13]
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 feb0 	bl	80079a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f002 f9f4 	bl	8008050 <free>
    phost->pActiveClass->pData = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005c6e:	2200      	movs	r2, #0
 8005c70:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3340      	adds	r3, #64	@ 0x40
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f8b2 	bl	8005dfe <GetLineCoding>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d105      	bne.n	8005cb0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005caa:	2102      	movs	r1, #2
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d877      	bhi.n	8005dd0 <USBH_CDC_Process+0x114>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <USBH_CDC_Process+0x2c>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cfd 	.word	0x08005cfd
 8005cec:	08005d03 	.word	0x08005d03
 8005cf0:	08005d33 	.word	0x08005d33
 8005cf4:	08005da7 	.word	0x08005da7
 8005cf8:	08005db5 	.word	0x08005db5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e06d      	b.n	8005dde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f897 	bl	8005e3c <SetLineCoding>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d20:	e058      	b.n	8005dd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d055      	beq.n	8005dd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005d30:	e050      	b.n	8005dd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	3340      	adds	r3, #64	@ 0x40
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f860 	bl	8005dfe <GetLineCoding>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d126      	bne.n	8005d96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5a:	791b      	ldrb	r3, [r3, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d13b      	bne.n	8005dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d133      	bne.n	8005dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d12b      	bne.n	8005dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d124      	bne.n	8005dd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f958 	bl	8006044 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d94:	e020      	b.n	8005dd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d01d      	beq.n	8005dd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005da4:	e018      	b.n	8005dd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f867 	bl	8005e7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8da 	bl	8005f66 <CDC_ProcessReception>
      break;
 8005db2:	e014      	b.n	8005dde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005db4:	2100      	movs	r1, #0
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 f81e 	bl	8006df8 <USBH_ClrFeature>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8005dce:	e005      	b.n	8005ddc <USBH_CDC_Process+0x120>

    default:
      break;
 8005dd0:	bf00      	nop
 8005dd2:	e004      	b.n	8005dde <USBH_CDC_Process+0x122>
      break;
 8005dd4:	bf00      	nop
 8005dd6:	e002      	b.n	8005dde <USBH_CDC_Process+0x122>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e000      	b.n	8005dde <USBH_CDC_Process+0x122>
      break;
 8005ddc:	bf00      	nop

  }

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	22a1      	movs	r2, #161	@ 0xa1
 8005e0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2221      	movs	r2, #33	@ 0x21
 8005e12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2207      	movs	r2, #7
 8005e24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2207      	movs	r2, #7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 fb17 	bl	8007460 <USBH_CtlReq>
 8005e32:	4603      	mov	r3, r0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2221      	movs	r2, #33	@ 0x21
 8005e4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2207      	movs	r2, #7
 8005e62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2207      	movs	r2, #7
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 faf8 	bl	8007460 <USBH_CtlReq>
 8005e70:	4603      	mov	r3, r0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d002      	beq.n	8005ea0 <CDC_ProcessTransmission+0x26>
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d023      	beq.n	8005ee6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005e9e:	e05e      	b.n	8005f5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	8b12      	ldrh	r2, [r2, #24]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d90b      	bls.n	8005ec4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8b1a      	ldrh	r2, [r3, #24]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	7b5b      	ldrb	r3, [r3, #13]
 8005eb8:	2001      	movs	r0, #1
 8005eba:	9000      	str	r0, [sp, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 fce0 	bl	8007882 <USBH_BulkSendData>
 8005ec2:	e00b      	b.n	8005edc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	7b5b      	ldrb	r3, [r3, #13]
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	9000      	str	r0, [sp, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 fcd3 	bl	8007882 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005ee4:	e03b      	b.n	8005f5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7b5b      	ldrb	r3, [r3, #13]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fff7 	bl	8007ee0 <USBH_LL_GetURBState>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d128      	bne.n	8005f4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	8b12      	ldrh	r2, [r2, #24]
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d90e      	bls.n	8005f26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	8b12      	ldrh	r2, [r2, #24]
 8005f10:	1a9a      	subs	r2, r3, r2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	8b12      	ldrh	r2, [r2, #24]
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	61da      	str	r2, [r3, #28]
 8005f24:	e002      	b.n	8005f2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005f3c:	e00e      	b.n	8005f5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f868 	bl	800601c <USBH_CDC_TransmitCallback>
      break;
 8005f4c:	e006      	b.n	8005f5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d103      	bne.n	8005f5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005f5c:	bf00      	nop
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d002      	beq.n	8005f8c <CDC_ProcessReception+0x26>
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d00e      	beq.n	8005fa8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8005f8a:	e043      	b.n	8006014 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	6a19      	ldr	r1, [r3, #32]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	8b5a      	ldrh	r2, [r3, #26]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	7b1b      	ldrb	r3, [r3, #12]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fc97 	bl	80078cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8005fa6:	e035      	b.n	8006014 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 ff96 	bl	8007ee0 <USBH_LL_GetURBState>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d129      	bne.n	8006012 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	7b1b      	ldrb	r3, [r3, #12]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fef9 	bl	8007dbc <USBH_LL_GetLastXferSize>
 8005fca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d016      	beq.n	8006004 <CDC_ProcessReception+0x9e>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	8b5b      	ldrh	r3, [r3, #26]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d110      	bne.n	8006004 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006002:	e006      	b.n	8006012 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f80f 	bl	8006030 <USBH_CDC_ReceiveCallback>
      break;
 8006012:	bf00      	nop
  }
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800606c:	2302      	movs	r3, #2
 800606e:	e029      	b.n	80060c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	79fa      	ldrb	r2, [r7, #7]
 8006074:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f81f 	bl	80060cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 fdc9 	bl	8007c54 <USBH_LL_Init>

  return USBH_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e009      	b.n	80060ee <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	33e0      	adds	r3, #224	@ 0xe0
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d9f2      	bls.n	80060da <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e009      	b.n	800610e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006114:	d3f1      	bcc.n	80060fa <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2240      	movs	r2, #64	@ 0x40
 800613a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	331c      	adds	r3, #28
 8006166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f002 f825 	bl	80081bc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f002 f81c 	bl	80081bc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800618a:	2212      	movs	r2, #18
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f002 f814 	bl	80081bc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800619a:	223e      	movs	r2, #62	@ 0x3e
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f002 f80c 	bl	80081bc <memset>

  return USBH_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10e      	bne.n	80061ea <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	33de      	adds	r3, #222	@ 0xde
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e004      	b.n	80061f4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80061ea:	2302      	movs	r3, #2
 80061ec:	73fb      	strb	r3, [r7, #15]
 80061ee:	e001      	b.n	80061f4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80061f0:	2302      	movs	r3, #2
 80061f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	429a      	cmp	r2, r3
 800621c:	d204      	bcs.n	8006228 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006226:	e001      	b.n	800622c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006228:	2302      	movs	r3, #2
 800622a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	461a      	mov	r2, r3
 8006248:	4603      	mov	r3, r0
 800624a:	70fb      	strb	r3, [r7, #3]
 800624c:	460b      	mov	r3, r1
 800624e:	70bb      	strb	r3, [r7, #2]
 8006250:	4613      	mov	r3, r2
 8006252:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006262:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006264:	e025      	b.n	80062b2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	221a      	movs	r2, #26
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	3308      	adds	r3, #8
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	3302      	adds	r3, #2
 8006276:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	795b      	ldrb	r3, [r3, #5]
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	429a      	cmp	r2, r3
 8006280:	d002      	beq.n	8006288 <USBH_FindInterface+0x4e>
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	2bff      	cmp	r3, #255	@ 0xff
 8006286:	d111      	bne.n	80062ac <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800628c:	78ba      	ldrb	r2, [r7, #2]
 800628e:	429a      	cmp	r2, r3
 8006290:	d002      	beq.n	8006298 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006292:	78bb      	ldrb	r3, [r7, #2]
 8006294:	2bff      	cmp	r3, #255	@ 0xff
 8006296:	d109      	bne.n	80062ac <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800629c:	787a      	ldrb	r2, [r7, #1]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d002      	beq.n	80062a8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062a2:	787b      	ldrb	r3, [r7, #1]
 80062a4:	2bff      	cmp	r3, #255	@ 0xff
 80062a6:	d101      	bne.n	80062ac <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	e006      	b.n	80062ba <USBH_FindInterface+0x80>
    }
    if_ix++;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	3301      	adds	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d9d6      	bls.n	8006266 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80062b8:	23ff      	movs	r3, #255	@ 0xff
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 fcfc 	bl	8007ccc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80062d4:	2101      	movs	r1, #1
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fe15 	bl	8007f06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af04      	add	r7, sp, #16
 80062ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80062f0:	2302      	movs	r3, #2
 80062f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d102      	bne.n	800630a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2203      	movs	r2, #3
 8006308:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b0b      	cmp	r3, #11
 8006312:	f200 81bc 	bhi.w	800668e <USBH_Process+0x3a6>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <USBH_Process+0x34>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	0800634d 	.word	0x0800634d
 8006320:	0800637f 	.word	0x0800637f
 8006324:	080063e9 	.word	0x080063e9
 8006328:	08006629 	.word	0x08006629
 800632c:	0800668f 	.word	0x0800668f
 8006330:	08006489 	.word	0x08006489
 8006334:	080065cf 	.word	0x080065cf
 8006338:	080064bf 	.word	0x080064bf
 800633c:	080064df 	.word	0x080064df
 8006340:	080064fd 	.word	0x080064fd
 8006344:	08006541 	.word	0x08006541
 8006348:	08006611 	.word	0x08006611
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 819c 	beq.w	8006692 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006360:	20c8      	movs	r0, #200	@ 0xc8
 8006362:	f001 fe1a 	bl	8007f9a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fd0d 	bl	8007d86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800637c:	e189      	b.n	8006692 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006398:	e18a      	b.n	80066b0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80063a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063a4:	d914      	bls.n	80063d0 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80063ac:	3301      	adds	r3, #1
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d903      	bls.n	80063c8 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	220d      	movs	r2, #13
 80063c4:	701a      	strb	r2, [r3, #0]
      break;
 80063c6:	e173      	b.n	80066b0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
      break;
 80063ce:	e16f      	b.n	80066b0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80063d6:	f103 020a 	add.w	r2, r3, #10
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80063e0:	200a      	movs	r0, #10
 80063e2:	f001 fdda 	bl	8007f9a <USBH_Delay>
      break;
 80063e6:	e163      	b.n	80066b0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80063f8:	2104      	movs	r1, #4
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80063fe:	2064      	movs	r0, #100	@ 0x64
 8006400:	f001 fdcb 	bl	8007f9a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fc97 	bl	8007d38 <USBH_LL_GetSpeed>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2205      	movs	r2, #5
 8006418:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 faa2 	bl	8007966 <USBH_AllocPipe>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fa9a 	bl	8007966 <USBH_AllocPipe>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7919      	ldrb	r1, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800644e:	9202      	str	r2, [sp, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	4603      	mov	r3, r0
 8006458:	2280      	movs	r2, #128	@ 0x80
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fa54 	bl	8007908 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	7959      	ldrb	r1, [r3, #5]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006474:	9202      	str	r2, [sp, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4603      	mov	r3, r0
 800647e:	2200      	movs	r2, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fa41 	bl	8007908 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006486:	e113      	b.n	80066b0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f917 	bl	80066bc <USBH_HandleEnum>
 800648e:	4603      	mov	r3, r0
 8006490:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	f040 80fd 	bne.w	8006696 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d103      	bne.n	80064b6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2208      	movs	r2, #8
 80064b2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80064b4:	e0ef      	b.n	8006696 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2207      	movs	r2, #7
 80064ba:	701a      	strb	r2, [r3, #0]
      break;
 80064bc:	e0eb      	b.n	8006696 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80e8 	beq.w	800669a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064d0:	2101      	movs	r1, #1
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2208      	movs	r2, #8
 80064da:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80064dc:	e0dd      	b.n	800669a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc3f 	bl	8006d6a <USBH_SetCfg>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 80d5 	bne.w	800669e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2209      	movs	r2, #9
 80064f8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80064fa:	e0d0      	b.n	800669e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800650a:	2101      	movs	r1, #1
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fc4f 	bl	8006db0 <USBH_SetFeature>
 8006512:	4603      	mov	r3, r0
 8006514:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	220a      	movs	r2, #10
 8006522:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006524:	e0bd      	b.n	80066a2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b03      	cmp	r3, #3
 800652c:	f040 80b9 	bne.w	80066a2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	220a      	movs	r2, #10
 8006534:	701a      	strb	r2, [r3, #0]
      break;
 8006536:	e0b4      	b.n	80066a2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	220a      	movs	r2, #10
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e0b0      	b.n	80066a2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80ad 	beq.w	80066a6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e016      	b.n	8006588 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32de      	adds	r2, #222	@ 0xde
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	791a      	ldrb	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800656c:	429a      	cmp	r2, r3
 800656e:	d108      	bne.n	8006582 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	32de      	adds	r2, #222	@ 0xde
 8006576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006580:	e005      	b.n	800658e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	3301      	adds	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0e5      	beq.n	800655a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d016      	beq.n	80065c6 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	4798      	blx	r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2206      	movs	r2, #6
 80065ae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065b6:	2103      	movs	r1, #3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80065bc:	e073      	b.n	80066a6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	220d      	movs	r2, #13
 80065c2:	701a      	strb	r2, [r3, #0]
      break;
 80065c4:	e06f      	b.n	80066a6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220d      	movs	r2, #13
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e06b      	b.n	80066a6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d017      	beq.n	8006608 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	220b      	movs	r2, #11
 80065f4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80065f6:	e058      	b.n	80066aa <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d154      	bne.n	80066aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	220d      	movs	r2, #13
 8006604:	701a      	strb	r2, [r3, #0]
      break;
 8006606:	e050      	b.n	80066aa <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	220d      	movs	r2, #13
 800660c:	701a      	strb	r2, [r3, #0]
      break;
 800660e:	e04c      	b.n	80066aa <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d049      	beq.n	80066ae <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
      }
      break;
 8006626:	e042      	b.n	80066ae <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff fd4b 	bl	80060cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006664:	2105      	movs	r1, #5
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d107      	bne.n	8006686 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fe21 	bl	80062c6 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006684:	e014      	b.n	80066b0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fb20 	bl	8007ccc <USBH_LL_Start>
      break;
 800668c:	e010      	b.n	80066b0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800668e:	bf00      	nop
 8006690:	e00e      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 8006692:	bf00      	nop
 8006694:	e00c      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 8006696:	bf00      	nop
 8006698:	e00a      	b.n	80066b0 <USBH_Process+0x3c8>
    break;
 800669a:	bf00      	nop
 800669c:	e008      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 800669e:	bf00      	nop
 80066a0:	e006      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 80066a2:	bf00      	nop
 80066a4:	e004      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <USBH_Process+0x3c8>
      break;
 80066ae:	bf00      	nop
  }
  return USBH_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop

080066bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af04      	add	r7, sp, #16
 80066c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	f200 81bd 	bhi.w	8006a50 <USBH_HandleEnum+0x394>
 80066d6:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <USBH_HandleEnum+0x20>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	080066fd 	.word	0x080066fd
 80066e0:	080067b7 	.word	0x080067b7
 80066e4:	08006821 	.word	0x08006821
 80066e8:	080068ab 	.word	0x080068ab
 80066ec:	08006915 	.word	0x08006915
 80066f0:	08006985 	.word	0x08006985
 80066f4:	080069cb 	.word	0x080069cb
 80066f8:	08006a11 	.word	0x08006a11
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80066fc:	2108      	movs	r1, #8
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa50 	bl	8006ba4 <USBH_Get_DevDesc>
 8006704:	4603      	mov	r3, r0
 8006706:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d12e      	bne.n	800676c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7919      	ldrb	r1, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4603      	mov	r3, r0
 800673c:	2280      	movs	r2, #128	@ 0x80
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 f8e2 	bl	8007908 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7959      	ldrb	r1, [r3, #5]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006758:	9202      	str	r2, [sp, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	9201      	str	r2, [sp, #4]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4603      	mov	r3, r0
 8006762:	2200      	movs	r2, #0
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f8cf 	bl	8007908 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800676a:	e173      	b.n	8006a54 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b03      	cmp	r3, #3
 8006770:	f040 8170 	bne.w	8006a54 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800677a:	3301      	adds	r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800678a:	2b03      	cmp	r3, #3
 800678c:	d903      	bls.n	8006796 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	220d      	movs	r2, #13
 8006792:	701a      	strb	r2, [r3, #0]
      break;
 8006794:	e15e      	b.n	8006a54 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	795b      	ldrb	r3, [r3, #5]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f903 	bl	80079a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 f8fd 	bl	80079a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
      break;
 80067b4:	e14e      	b.n	8006a54 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80067b6:	2112      	movs	r1, #18
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9f3 	bl	8006ba4 <USBH_Get_DevDesc>
 80067be:	4603      	mov	r3, r0
 80067c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067ce:	e143      	b.n	8006a58 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	f040 8140 	bne.w	8006a58 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80067de:	3301      	adds	r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d903      	bls.n	80067fa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	220d      	movs	r2, #13
 80067f6:	701a      	strb	r2, [r3, #0]
      break;
 80067f8:	e12e      	b.n	8006a58 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	795b      	ldrb	r3, [r3, #5]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f8d1 	bl	80079a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 f8cb 	bl	80079a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	701a      	strb	r2, [r3, #0]
      break;
 800681e:	e11b      	b.n	8006a58 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006820:	2101      	movs	r1, #1
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa7d 	bl	8006d22 <USBH_SetAddress>
 8006828:	4603      	mov	r3, r0
 800682a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d130      	bne.n	8006894 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006832:	2002      	movs	r0, #2
 8006834:	f001 fbb1 	bl	8007f9a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2203      	movs	r2, #3
 8006844:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7919      	ldrb	r1, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800685a:	9202      	str	r2, [sp, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	4603      	mov	r3, r0
 8006864:	2280      	movs	r2, #128	@ 0x80
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f84e 	bl	8007908 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7959      	ldrb	r1, [r3, #5]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006880:	9202      	str	r2, [sp, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	9201      	str	r2, [sp, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	4603      	mov	r3, r0
 800688a:	2200      	movs	r2, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f83b 	bl	8007908 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006892:	e0e3      	b.n	8006a5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2b03      	cmp	r3, #3
 8006898:	f040 80e0 	bne.w	8006a5c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	220d      	movs	r2, #13
 80068a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	705a      	strb	r2, [r3, #1]
      break;
 80068a8:	e0d8      	b.n	8006a5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80068aa:	2109      	movs	r1, #9
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f9a5 	bl	8006bfc <USBH_Get_CfgDesc>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068c2:	e0cd      	b.n	8006a60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	f040 80ca 	bne.w	8006a60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80068d2:	3301      	adds	r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d903      	bls.n	80068ee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	220d      	movs	r2, #13
 80068ea:	701a      	strb	r2, [r3, #0]
      break;
 80068ec:	e0b8      	b.n	8006a60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	795b      	ldrb	r3, [r3, #5]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 f857 	bl	80079a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	791b      	ldrb	r3, [r3, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 f851 	bl	80079a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
      break;
 8006912:	e0a5      	b.n	8006a60 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f96d 	bl	8006bfc <USBH_Get_CfgDesc>
 8006922:	4603      	mov	r3, r0
 8006924:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d103      	bne.n	8006934 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2205      	movs	r2, #5
 8006930:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006932:	e097      	b.n	8006a64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b03      	cmp	r3, #3
 8006938:	f040 8094 	bne.w	8006a64 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006942:	3301      	adds	r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006952:	2b03      	cmp	r3, #3
 8006954:	d903      	bls.n	800695e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	220d      	movs	r2, #13
 800695a:	701a      	strb	r2, [r3, #0]
      break;
 800695c:	e082      	b.n	8006a64 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	795b      	ldrb	r3, [r3, #5]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f81f 	bl	80079a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	791b      	ldrb	r3, [r3, #4]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f819 	bl	80079a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
      break;
 8006982:	e06f      	b.n	8006a64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800698a:	2b00      	cmp	r3, #0
 800698c:	d019      	beq.n	80069c2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800699a:	23ff      	movs	r3, #255	@ 0xff
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f957 	bl	8006c50 <USBH_Get_StringDesc>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2206      	movs	r2, #6
 80069b0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80069b2:	e059      	b.n	8006a68 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d156      	bne.n	8006a68 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2206      	movs	r2, #6
 80069be:	705a      	strb	r2, [r3, #1]
      break;
 80069c0:	e052      	b.n	8006a68 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2206      	movs	r2, #6
 80069c6:	705a      	strb	r2, [r3, #1]
      break;
 80069c8:	e04e      	b.n	8006a68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d019      	beq.n	8006a08 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069e0:	23ff      	movs	r3, #255	@ 0xff
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f934 	bl	8006c50 <USBH_Get_StringDesc>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2207      	movs	r2, #7
 80069f6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80069f8:	e038      	b.n	8006a6c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d135      	bne.n	8006a6c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2207      	movs	r2, #7
 8006a04:	705a      	strb	r2, [r3, #1]
      break;
 8006a06:	e031      	b.n	8006a6c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2207      	movs	r2, #7
 8006a0c:	705a      	strb	r2, [r3, #1]
      break;
 8006a0e:	e02d      	b.n	8006a6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d017      	beq.n	8006a4a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a26:	23ff      	movs	r3, #255	@ 0xff
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f911 	bl	8006c50 <USBH_Get_StringDesc>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006a3c:	e018      	b.n	8006a70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d115      	bne.n	8006a70 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	e012      	b.n	8006a70 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4e:	e00f      	b.n	8006a70 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006a50:	bf00      	nop
 8006a52:	e00e      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a54:	bf00      	nop
 8006a56:	e00c      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a58:	bf00      	nop
 8006a5a:	e00a      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e008      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a60:	bf00      	nop
 8006a62:	e006      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a64:	bf00      	nop
 8006a66:	e004      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <USBH_HandleEnum+0x3b6>
      break;
 8006a70:	bf00      	nop
  }
  return Status;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f804 	bl	8006abe <USBH_HandleSof>
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b0b      	cmp	r3, #11
 8006ace:	d10a      	bne.n	8006ae6 <USBH_HandleSof+0x28>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8006afe:	bf00      	nop
}
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8006b22:	bf00      	nop
}
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f8c0 	bl	8007d02 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	791b      	ldrb	r3, [r3, #4]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 ff0d 	bl	80079a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	795b      	ldrb	r3, [r3, #5]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 ff07 	bl	80079a8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006bb0:	887b      	ldrh	r3, [r7, #2]
 8006bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb6:	d901      	bls.n	8006bbc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e01b      	b.n	8006bf4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f872 	bl	8006cb8 <USBH_GetDescriptor>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006be4:	887a      	ldrh	r2, [r7, #2]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f929 	bl	8006e40 <USBH_ParseDevDesc>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	331c      	adds	r3, #28
 8006c0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006c0e:	887b      	ldrh	r3, [r7, #2]
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c14:	d901      	bls.n	8006c1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e016      	b.n	8006c48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f846 	bl	8006cb8 <USBH_GetDescriptor>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d107      	bne.n	8006c46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006c36:	887b      	ldrh	r3, [r7, #2]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f9af 	bl	8006fa0 <USBH_ParseCfgDesc>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	72fb      	strb	r3, [r7, #11]
 8006c60:	4613      	mov	r3, r2
 8006c62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c6a:	d802      	bhi.n	8006c72 <USBH_Get_StringDesc+0x22>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e01c      	b.n	8006cb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006c7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f812 	bl	8006cb8 <USBH_GetDescriptor>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d107      	bne.n	8006cae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ca4:	893a      	ldrh	r2, [r7, #8]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fb8c 	bl	80073c6 <USBH_ParseStringDesc>
  }

  return status;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	72fb      	strb	r3, [r7, #11]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	789b      	ldrb	r3, [r3, #2]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d11c      	bne.n	8006d0c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006cd2:	7afb      	ldrb	r3, [r7, #11]
 8006cd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2206      	movs	r2, #6
 8006ce2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	893a      	ldrh	r2, [r7, #8]
 8006ce8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006cea:	893b      	ldrh	r3, [r7, #8]
 8006cec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf4:	d104      	bne.n	8006d00 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f240 4209 	movw	r2, #1033	@ 0x409
 8006cfc:	829a      	strh	r2, [r3, #20]
 8006cfe:	e002      	b.n	8006d06 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8b3a      	ldrh	r2, [r7, #24]
 8006d0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006d0c:	8b3b      	ldrh	r3, [r7, #24]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fba4 	bl	8007460 <USBH_CtlReq>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	789b      	ldrb	r3, [r3, #2]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d10f      	bne.n	8006d56 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2205      	movs	r2, #5
 8006d40:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fb80 	bl	8007460 <USBH_CtlReq>
 8006d60:	4603      	mov	r3, r0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	789b      	ldrb	r3, [r3, #2]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10e      	bne.n	8006d9c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2209      	movs	r2, #9
 8006d88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	887a      	ldrh	r2, [r7, #2]
 8006d8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb5d 	bl	8007460 <USBH_CtlReq>
 8006da6:	4603      	mov	r3, r0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	789b      	ldrb	r3, [r3, #2]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d10f      	bne.n	8006de4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006de4:	2200      	movs	r2, #0
 8006de6:	2100      	movs	r1, #0
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb39 	bl	8007460 <USBH_CtlReq>
 8006dee:	4603      	mov	r3, r0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	789b      	ldrb	r3, [r3, #2]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d10f      	bne.n	8006e2c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb15 	bl	8007460 <USBH_CtlReq>
 8006e36:	4603      	mov	r3, r0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006e54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006e60:	2302      	movs	r3, #2
 8006e62:	e094      	b.n	8006f8e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	785a      	ldrb	r2, [r3, #1]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3302      	adds	r3, #2
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3303      	adds	r3, #3
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	791a      	ldrb	r2, [r3, #4]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	795a      	ldrb	r2, [r3, #5]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	799a      	ldrb	r2, [r3, #6]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	79da      	ldrb	r2, [r3, #7]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d11b      	bne.n	8006efa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	79db      	ldrb	r3, [r3, #7]
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	dc0f      	bgt.n	8006eea <USBH_ParseDevDesc+0xaa>
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	db0f      	blt.n	8006eee <USBH_ParseDevDesc+0xae>
 8006ece:	3b08      	subs	r3, #8
 8006ed0:	4a32      	ldr	r2, [pc, #200]	@ (8006f9c <USBH_ParseDevDesc+0x15c>)
 8006ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <USBH_ParseDevDesc+0xb6>
 8006ee8:	e001      	b.n	8006eee <USBH_ParseDevDesc+0xae>
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d003      	beq.n	8006ef6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	71da      	strb	r2, [r3, #7]
        break;
 8006ef4:	e000      	b.n	8006ef8 <USBH_ParseDevDesc+0xb8>
        break;
 8006ef6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006ef8:	e00e      	b.n	8006f18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d107      	bne.n	8006f14 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	79db      	ldrb	r3, [r3, #7]
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d005      	beq.n	8006f18 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2208      	movs	r2, #8
 8006f10:	71da      	strb	r2, [r3, #7]
 8006f12:	e001      	b.n	8006f18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006f14:	2303      	movs	r3, #3
 8006f16:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d936      	bls.n	8006f8c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	3308      	adds	r3, #8
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	3309      	adds	r3, #9
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	330a      	adds	r3, #10
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	330b      	adds	r3, #11
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	330c      	adds	r3, #12
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	330d      	adds	r3, #13
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	7b9a      	ldrb	r2, [r3, #14]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	7bda      	ldrb	r2, [r3, #15]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	7c1a      	ldrb	r2, [r3, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	7c5a      	ldrb	r2, [r3, #17]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	01000101 	.word	0x01000101

08006fa0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	@ 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006fb4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e0de      	b.n	8007190 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d002      	beq.n	8006fe4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	2209      	movs	r2, #9
 8006fe2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	781a      	ldrb	r2, [r3, #0]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	785a      	ldrb	r2, [r3, #1]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3303      	adds	r3, #3
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	b29b      	uxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800700e:	bf28      	it	cs
 8007010:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007014:	b29a      	uxth	r2, r3
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	791a      	ldrb	r2, [r3, #4]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	795a      	ldrb	r2, [r3, #5]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	799a      	ldrb	r2, [r3, #6]
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	79da      	ldrb	r2, [r3, #7]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	7a1a      	ldrb	r2, [r3, #8]
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2b09      	cmp	r3, #9
 8007046:	f240 80a1 	bls.w	800718c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800704a:	2309      	movs	r3, #9
 800704c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007052:	e085      	b.n	8007160 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007054:	f107 0316 	add.w	r3, r7, #22
 8007058:	4619      	mov	r1, r3
 800705a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800705c:	f000 f9e6 	bl	800742c <USBH_GetNextDesc>
 8007060:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d17a      	bne.n	8007160 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800706a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b09      	cmp	r3, #9
 8007070:	d002      	beq.n	8007078 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	2209      	movs	r2, #9
 8007076:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800707c:	221a      	movs	r2, #26
 800707e:	fb02 f303 	mul.w	r3, r2, r3
 8007082:	3308      	adds	r3, #8
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	4413      	add	r3, r2
 8007088:	3302      	adds	r3, #2
 800708a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800708c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708e:	69f8      	ldr	r0, [r7, #28]
 8007090:	f000 f882 	bl	8007198 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800709e:	e043      	b.n	8007128 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80070a0:	f107 0316 	add.w	r3, r7, #22
 80070a4:	4619      	mov	r1, r3
 80070a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a8:	f000 f9c0 	bl	800742c <USBH_GetNextDesc>
 80070ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	d138      	bne.n	8007128 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	795b      	ldrb	r3, [r3, #5]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d113      	bne.n	80070e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d003      	beq.n	80070ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	799b      	ldrb	r3, [r3, #6]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d10b      	bne.n	80070e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	79db      	ldrb	r3, [r3, #7]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <USBH_ParseCfgDesc+0x14e>
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d007      	beq.n	80070ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	2209      	movs	r2, #9
 80070e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80070e4:	e003      	b.n	80070ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	2207      	movs	r2, #7
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e000      	b.n	80070f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80070ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80070f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80070f8:	3201      	adds	r2, #1
 80070fa:	00d2      	lsls	r2, r2, #3
 80070fc:	211a      	movs	r1, #26
 80070fe:	fb01 f303 	mul.w	r3, r1, r3
 8007102:	4413      	add	r3, r2
 8007104:	3308      	adds	r3, #8
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	4413      	add	r3, r2
 800710a:	3304      	adds	r3, #4
 800710c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800710e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f86f 	bl	80071f6 <USBH_ParseEPDesc>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800711e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007122:	3301      	adds	r3, #1
 8007124:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800712c:	2b01      	cmp	r3, #1
 800712e:	d80a      	bhi.n	8007146 <USBH_ParseCfgDesc+0x1a6>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007138:	429a      	cmp	r2, r3
 800713a:	d204      	bcs.n	8007146 <USBH_ParseCfgDesc+0x1a6>
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	885a      	ldrh	r2, [r3, #2]
 8007140:	8afb      	ldrh	r3, [r7, #22]
 8007142:	429a      	cmp	r2, r3
 8007144:	d8ac      	bhi.n	80070a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	791b      	ldrb	r3, [r3, #4]
 800714a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800714e:	429a      	cmp	r2, r3
 8007150:	d201      	bcs.n	8007156 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8007152:	2303      	movs	r3, #3
 8007154:	e01c      	b.n	8007190 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8007156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800715a:	3301      	adds	r3, #1
 800715c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007164:	2b01      	cmp	r3, #1
 8007166:	d805      	bhi.n	8007174 <USBH_ParseCfgDesc+0x1d4>
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	885a      	ldrh	r2, [r3, #2]
 800716c:	8afb      	ldrh	r3, [r7, #22]
 800716e:	429a      	cmp	r2, r3
 8007170:	f63f af70 	bhi.w	8007054 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	2b02      	cmp	r3, #2
 800717a:	bf28      	it	cs
 800717c:	2302      	movcs	r3, #2
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007184:	429a      	cmp	r2, r3
 8007186:	d201      	bcs.n	800718c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8007188:	2303      	movs	r3, #3
 800718a:	e001      	b.n	8007190 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800718c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007190:	4618      	mov	r0, r3
 8007192:	3730      	adds	r7, #48	@ 0x30
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785a      	ldrb	r2, [r3, #1]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	789a      	ldrb	r2, [r3, #2]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	78da      	ldrb	r2, [r3, #3]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	791a      	ldrb	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	795a      	ldrb	r2, [r3, #5]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	799a      	ldrb	r2, [r3, #6]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	79da      	ldrb	r2, [r3, #7]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	7a1a      	ldrb	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	721a      	strb	r2, [r3, #8]
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	785a      	ldrb	r2, [r3, #1]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	789a      	ldrb	r2, [r3, #2]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	78da      	ldrb	r2, [r3, #3]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3305      	adds	r3, #5
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	b29b      	uxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	799a      	ldrb	r2, [r3, #6]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	889b      	ldrh	r3, [r3, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007258:	d804      	bhi.n	8007264 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800725e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007262:	d901      	bls.n	8007268 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007264:	2303      	movs	r3, #3
 8007266:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800726e:	2b00      	cmp	r3, #0
 8007270:	d136      	bne.n	80072e0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	78db      	ldrb	r3, [r3, #3]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d108      	bne.n	8007290 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	889b      	ldrh	r3, [r3, #4]
 8007282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007286:	f240 8097 	bls.w	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800728a:	2303      	movs	r3, #3
 800728c:	75fb      	strb	r3, [r7, #23]
 800728e:	e093      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	889b      	ldrh	r3, [r3, #4]
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	f240 8089 	bls.w	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80072a6:	2303      	movs	r3, #3
 80072a8:	75fb      	strb	r3, [r7, #23]
 80072aa:	e085      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	78db      	ldrb	r3, [r3, #3]
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d005      	beq.n	80072c4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	78db      	ldrb	r3, [r3, #3]
 80072bc:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d10a      	bne.n	80072da <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	799b      	ldrb	r3, [r3, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <USBH_ParseEPDesc+0xde>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	799b      	ldrb	r3, [r3, #6]
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d970      	bls.n	80073b6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80072d8:	e06d      	b.n	80073b6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80072da:	2303      	movs	r3, #3
 80072dc:	75fb      	strb	r3, [r7, #23]
 80072de:	e06b      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d13c      	bne.n	8007364 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	78db      	ldrb	r3, [r3, #3]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d005      	beq.n	8007302 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	78db      	ldrb	r3, [r3, #3]
 80072fa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	889b      	ldrh	r3, [r3, #4]
 8007306:	2b40      	cmp	r3, #64	@ 0x40
 8007308:	d956      	bls.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800730a:	2303      	movs	r3, #3
 800730c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800730e:	e053      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	78db      	ldrb	r3, [r3, #3]
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10e      	bne.n	800733a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	799b      	ldrb	r3, [r3, #6]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007328:	2b10      	cmp	r3, #16
 800732a:	d803      	bhi.n	8007334 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d941      	bls.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007334:	2303      	movs	r3, #3
 8007336:	75fb      	strb	r3, [r7, #23]
 8007338:	e03e      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	78db      	ldrb	r3, [r3, #3]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d10b      	bne.n	800735e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	799b      	ldrb	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <USBH_ParseEPDesc+0x162>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	889b      	ldrh	r3, [r3, #4]
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007356:	d32f      	bcc.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007358:	2303      	movs	r3, #3
 800735a:	75fb      	strb	r3, [r7, #23]
 800735c:	e02c      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800735e:	2303      	movs	r3, #3
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	e029      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800736a:	2b02      	cmp	r3, #2
 800736c:	d120      	bne.n	80073b0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	889b      	ldrh	r3, [r3, #4]
 800737e:	2b08      	cmp	r3, #8
 8007380:	d01a      	beq.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007382:	2303      	movs	r3, #3
 8007384:	75fb      	strb	r3, [r7, #23]
 8007386:	e017      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	78db      	ldrb	r3, [r3, #3]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b03      	cmp	r3, #3
 8007392:	d10a      	bne.n	80073aa <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	799b      	ldrb	r3, [r3, #6]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <USBH_ParseEPDesc+0x1ae>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	889b      	ldrh	r3, [r3, #4]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d909      	bls.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80073a4:	2303      	movs	r3, #3
 80073a6:	75fb      	strb	r3, [r7, #23]
 80073a8:	e006      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80073aa:	2303      	movs	r3, #3
 80073ac:	75fb      	strb	r3, [r7, #23]
 80073ae:	e003      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80073b0:	2303      	movs	r3, #3
 80073b2:	75fb      	strb	r3, [r7, #23]
 80073b4:	e000      	b.n	80073b8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80073b6:	bf00      	nop
  }

  return status;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b087      	sub	sp, #28
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	4613      	mov	r3, r2
 80073d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d120      	bne.n	8007420 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	1e9a      	subs	r2, r3, #2
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bf28      	it	cs
 80073ea:	4613      	movcs	r3, r2
 80073ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3302      	adds	r3, #2
 80073f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80073f4:	2300      	movs	r3, #0
 80073f6:	82fb      	strh	r3, [r7, #22]
 80073f8:	e00b      	b.n	8007412 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3301      	adds	r3, #1
 800740a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800740c:	8afb      	ldrh	r3, [r7, #22]
 800740e:	3302      	adds	r3, #2
 8007410:	82fb      	strh	r3, [r7, #22]
 8007412:	8afa      	ldrh	r2, [r7, #22]
 8007414:	8abb      	ldrh	r3, [r7, #20]
 8007416:	429a      	cmp	r2, r3
 8007418:	d3ef      	bcc.n	80073fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
  }
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	4413      	add	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4413      	add	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	789b      	ldrb	r3, [r3, #2]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d002      	beq.n	8007480 <USBH_CtlReq+0x20>
 800747a:	2b02      	cmp	r3, #2
 800747c:	d00f      	beq.n	800749e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800747e:	e027      	b.n	80074d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2202      	movs	r2, #2
 8007496:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
      break;
 800749c:	e018      	b.n	80074d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f81c 	bl	80074dc <USBH_HandleControl>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <USBH_CtlReq+0x54>
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d106      	bne.n	80074c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	761a      	strb	r2, [r3, #24]
      break;
 80074c0:	e005      	b.n	80074ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d102      	bne.n	80074ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	709a      	strb	r2, [r3, #2]
      break;
 80074ce:	bf00      	nop
  }
  return status;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	7e1b      	ldrb	r3, [r3, #24]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	2b0a      	cmp	r3, #10
 80074f4:	f200 8157 	bhi.w	80077a6 <USBH_HandleControl+0x2ca>
 80074f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007500 <USBH_HandleControl+0x24>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	0800752d 	.word	0x0800752d
 8007504:	08007547 	.word	0x08007547
 8007508:	080075b1 	.word	0x080075b1
 800750c:	080075d7 	.word	0x080075d7
 8007510:	08007611 	.word	0x08007611
 8007514:	0800763b 	.word	0x0800763b
 8007518:	0800768d 	.word	0x0800768d
 800751c:	080076af 	.word	0x080076af
 8007520:	080076eb 	.word	0x080076eb
 8007524:	08007711 	.word	0x08007711
 8007528:	0800774f 	.word	0x0800774f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f103 0110 	add.w	r1, r3, #16
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	795b      	ldrb	r3, [r3, #5]
 8007536:	461a      	mov	r2, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f945 	bl	80077c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	761a      	strb	r2, [r3, #24]
      break;
 8007544:	e13a      	b.n	80077bc <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	795b      	ldrb	r3, [r3, #5]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fcc7 	bl	8007ee0 <USBH_LL_GetURBState>
 8007552:	4603      	mov	r3, r0
 8007554:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d11e      	bne.n	800759a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7c1b      	ldrb	r3, [r3, #16]
 8007560:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007564:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8adb      	ldrh	r3, [r3, #22]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	2b80      	cmp	r3, #128	@ 0x80
 8007572:	d103      	bne.n	800757c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2203      	movs	r2, #3
 8007578:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800757a:	e116      	b.n	80077aa <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2205      	movs	r2, #5
 8007580:	761a      	strb	r2, [r3, #24]
      break;
 8007582:	e112      	b.n	80077aa <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8007584:	7b7b      	ldrb	r3, [r7, #13]
 8007586:	2b80      	cmp	r3, #128	@ 0x80
 8007588:	d103      	bne.n	8007592 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2209      	movs	r2, #9
 800758e:	761a      	strb	r2, [r3, #24]
      break;
 8007590:	e10b      	b.n	80077aa <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2207      	movs	r2, #7
 8007596:	761a      	strb	r2, [r3, #24]
      break;
 8007598:	e107      	b.n	80077aa <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d003      	beq.n	80075a8 <USBH_HandleControl+0xcc>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	f040 8101 	bne.w	80077aa <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	220b      	movs	r2, #11
 80075ac:	761a      	strb	r2, [r3, #24]
      break;
 80075ae:	e0fc      	b.n	80077aa <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6899      	ldr	r1, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	899a      	ldrh	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f93c 	bl	8007846 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2204      	movs	r2, #4
 80075d2:	761a      	strb	r2, [r3, #24]
      break;
 80075d4:	e0f2      	b.n	80077bc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fc7f 	bl	8007ee0 <USBH_LL_GetURBState>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d103      	bne.n	80075f4 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2209      	movs	r2, #9
 80075f0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80075f2:	e0dc      	b.n	80077ae <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	d102      	bne.n	8007600 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 80075fa:	2303      	movs	r3, #3
 80075fc:	73fb      	strb	r3, [r7, #15]
      break;
 80075fe:	e0d6      	b.n	80077ae <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b04      	cmp	r3, #4
 8007604:	f040 80d3 	bne.w	80077ae <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	220b      	movs	r2, #11
 800760c:	761a      	strb	r2, [r3, #24]
      break;
 800760e:	e0ce      	b.n	80077ae <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6899      	ldr	r1, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	899a      	ldrh	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	795b      	ldrb	r3, [r3, #5]
 800761c:	2001      	movs	r0, #1
 800761e:	9000      	str	r0, [sp, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8eb 	bl	80077fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2206      	movs	r2, #6
 8007636:	761a      	strb	r2, [r3, #24]
      break;
 8007638:	e0c0      	b.n	80077bc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	795b      	ldrb	r3, [r3, #5]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc4d 	bl	8007ee0 <USBH_LL_GetURBState>
 8007646:	4603      	mov	r3, r0
 8007648:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d103      	bne.n	8007658 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2207      	movs	r2, #7
 8007654:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007656:	e0ac      	b.n	80077b2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b05      	cmp	r3, #5
 800765c:	d105      	bne.n	800766a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220c      	movs	r2, #12
 8007662:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
      break;
 8007668:	e0a3      	b.n	80077b2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d103      	bne.n	8007678 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2205      	movs	r2, #5
 8007674:	761a      	strb	r2, [r3, #24]
      break;
 8007676:	e09c      	b.n	80077b2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b04      	cmp	r3, #4
 800767c:	f040 8099 	bne.w	80077b2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	220b      	movs	r2, #11
 8007684:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007686:	2302      	movs	r3, #2
 8007688:	73fb      	strb	r3, [r7, #15]
      break;
 800768a:	e092      	b.n	80077b2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	2100      	movs	r1, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f8d6 	bl	8007846 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2208      	movs	r2, #8
 80076aa:	761a      	strb	r2, [r3, #24]

      break;
 80076ac:	e086      	b.n	80077bc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	791b      	ldrb	r3, [r3, #4]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc13 	bl	8007ee0 <USBH_LL_GetURBState>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d105      	bne.n	80076d0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	220d      	movs	r2, #13
 80076c8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80076ce:	e072      	b.n	80077b6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d103      	bne.n	80076de <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220b      	movs	r2, #11
 80076da:	761a      	strb	r2, [r3, #24]
      break;
 80076dc:	e06b      	b.n	80077b6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b05      	cmp	r3, #5
 80076e2:	d168      	bne.n	80077b6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80076e4:	2303      	movs	r3, #3
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	e065      	b.n	80077b6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	795b      	ldrb	r3, [r3, #5]
 80076ee:	2201      	movs	r2, #1
 80076f0:	9200      	str	r2, [sp, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f880 	bl	80077fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	220a      	movs	r2, #10
 800770c:	761a      	strb	r2, [r3, #24]
      break;
 800770e:	e055      	b.n	80077bc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	795b      	ldrb	r3, [r3, #5]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fbe2 	bl	8007ee0 <USBH_LL_GetURBState>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d105      	bne.n	8007732 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	220d      	movs	r2, #13
 800772e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007730:	e043      	b.n	80077ba <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d103      	bne.n	8007740 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2209      	movs	r2, #9
 800773c:	761a      	strb	r2, [r3, #24]
      break;
 800773e:	e03c      	b.n	80077ba <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d139      	bne.n	80077ba <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	220b      	movs	r2, #11
 800774a:	761a      	strb	r2, [r3, #24]
      break;
 800774c:	e035      	b.n	80077ba <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7e5b      	ldrb	r3, [r3, #25]
 8007752:	3301      	adds	r3, #1
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	765a      	strb	r2, [r3, #25]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7e5b      	ldrb	r3, [r3, #25]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d806      	bhi.n	8007770 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800776e:	e025      	b.n	80077bc <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007776:	2106      	movs	r1, #6
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	795b      	ldrb	r3, [r3, #5]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f90d 	bl	80079a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f907 	bl	80079a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80077a0:	2302      	movs	r3, #2
 80077a2:	73fb      	strb	r3, [r7, #15]
      break;
 80077a4:	e00a      	b.n	80077bc <USBH_HandleControl+0x2e0>

    default:
      break;
 80077a6:	bf00      	nop
 80077a8:	e008      	b.n	80077bc <USBH_HandleControl+0x2e0>
      break;
 80077aa:	bf00      	nop
 80077ac:	e006      	b.n	80077bc <USBH_HandleControl+0x2e0>
      break;
 80077ae:	bf00      	nop
 80077b0:	e004      	b.n	80077bc <USBH_HandleControl+0x2e0>
      break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <USBH_HandleControl+0x2e0>
      break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <USBH_HandleControl+0x2e0>
      break;
 80077ba:	bf00      	nop
  }

  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af04      	add	r7, sp, #16
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80077d6:	79f9      	ldrb	r1, [r7, #7]
 80077d8:	2300      	movs	r3, #0
 80077da:	9303      	str	r3, [sp, #12]
 80077dc:	2308      	movs	r3, #8
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	2300      	movs	r3, #0
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	2300      	movs	r3, #0
 80077ea:	2200      	movs	r2, #0
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fb46 	bl	8007e7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af04      	add	r7, sp, #16
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4611      	mov	r1, r2
 8007808:	461a      	mov	r2, r3
 800780a:	460b      	mov	r3, r1
 800780c:	80fb      	strh	r3, [r7, #6]
 800780e:	4613      	mov	r3, r2
 8007810:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007820:	7979      	ldrb	r1, [r7, #5]
 8007822:	7e3b      	ldrb	r3, [r7, #24]
 8007824:	9303      	str	r3, [sp, #12]
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	9302      	str	r3, [sp, #8]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	2301      	movs	r3, #1
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	2200      	movs	r2, #0
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fb21 	bl	8007e7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b088      	sub	sp, #32
 800784a:	af04      	add	r7, sp, #16
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	460b      	mov	r3, r1
 8007856:	80fb      	strh	r3, [r7, #6]
 8007858:	4613      	mov	r3, r2
 800785a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800785c:	7979      	ldrb	r1, [r7, #5]
 800785e:	2300      	movs	r3, #0
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	2301      	movs	r3, #1
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	2201      	movs	r2, #1
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fb03 	bl	8007e7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007878:	2300      	movs	r3, #0

}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b088      	sub	sp, #32
 8007886:	af04      	add	r7, sp, #16
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	460b      	mov	r3, r1
 8007892:	80fb      	strh	r3, [r7, #6]
 8007894:	4613      	mov	r3, r2
 8007896:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078a6:	7979      	ldrb	r1, [r7, #5]
 80078a8:	7e3b      	ldrb	r3, [r7, #24]
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	2301      	movs	r3, #1
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	2302      	movs	r3, #2
 80078ba:	2200      	movs	r2, #0
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fade 	bl	8007e7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4611      	mov	r1, r2
 80078d8:	461a      	mov	r2, r3
 80078da:	460b      	mov	r3, r1
 80078dc:	80fb      	strh	r3, [r7, #6]
 80078de:	4613      	mov	r3, r2
 80078e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078e2:	7979      	ldrb	r1, [r7, #5]
 80078e4:	2300      	movs	r3, #0
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	2301      	movs	r3, #1
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	2302      	movs	r3, #2
 80078f6:	2201      	movs	r2, #1
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fac0 	bl	8007e7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af04      	add	r7, sp, #16
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	461a      	mov	r2, r3
 8007916:	4603      	mov	r3, r0
 8007918:	70fb      	strb	r3, [r7, #3]
 800791a:	460b      	mov	r3, r1
 800791c:	70bb      	strb	r3, [r7, #2]
 800791e:	4613      	mov	r3, r2
 8007920:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007922:	7878      	ldrb	r0, [r7, #1]
 8007924:	78ba      	ldrb	r2, [r7, #2]
 8007926:	78f9      	ldrb	r1, [r7, #3]
 8007928:	8b3b      	ldrh	r3, [r7, #24]
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	7d3b      	ldrb	r3, [r7, #20]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	7c3b      	ldrb	r3, [r7, #16]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4603      	mov	r3, r0
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa53 	bl	8007de2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa72 	bl	8007e40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f836 	bl	80079e4 <USBH_GetFreePipe>
 8007978:	4603      	mov	r3, r0
 800797a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800797c:	89fb      	ldrh	r3, [r7, #14]
 800797e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007982:	4293      	cmp	r3, r2
 8007984:	d00a      	beq.n	800799c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	89fb      	ldrh	r3, [r7, #14]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	33e0      	adds	r3, #224	@ 0xe0
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800799c:	89fb      	ldrh	r3, [r7, #14]
 800799e:	b2db      	uxtb	r3, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d80d      	bhi.n	80079d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	33e0      	adds	r3, #224	@ 0xe0
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	33e0      	adds	r3, #224	@ 0xe0
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e00f      	b.n	8007a16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	33e0      	adds	r3, #224	@ 0xe0
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	e007      	b.n	8007a20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	3301      	adds	r3, #1
 8007a14:	73fb      	strb	r3, [r7, #15]
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b0f      	cmp	r3, #15
 8007a1a:	d9ec      	bls.n	80079f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007a30:	2201      	movs	r2, #1
 8007a32:	490e      	ldr	r1, [pc, #56]	@ (8007a6c <MX_USB_HOST_Init+0x40>)
 8007a34:	480e      	ldr	r0, [pc, #56]	@ (8007a70 <MX_USB_HOST_Init+0x44>)
 8007a36:	f7fe fb0f 	bl	8006058 <USBH_Init>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007a40:	f7f9 f81c 	bl	8000a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007a44:	490b      	ldr	r1, [pc, #44]	@ (8007a74 <MX_USB_HOST_Init+0x48>)
 8007a46:	480a      	ldr	r0, [pc, #40]	@ (8007a70 <MX_USB_HOST_Init+0x44>)
 8007a48:	f7fe fbb1 	bl	80061ae <USBH_RegisterClass>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007a52:	f7f9 f813 	bl	8000a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007a56:	4806      	ldr	r0, [pc, #24]	@ (8007a70 <MX_USB_HOST_Init+0x44>)
 8007a58:	f7fe fc35 	bl	80062c6 <USBH_Start>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007a62:	f7f9 f80b 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08007a8d 	.word	0x08007a8d
 8007a70:	200000e8 	.word	0x200000e8
 8007a74:	2000000c 	.word	0x2000000c

08007a78 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007a7c:	4802      	ldr	r0, [pc, #8]	@ (8007a88 <MX_USB_HOST_Process+0x10>)
 8007a7e:	f7fe fc33 	bl	80062e8 <USBH_Process>
}
 8007a82:	bf00      	nop
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200000e8 	.word	0x200000e8

08007a8c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d819      	bhi.n	8007ad4 <USBH_UserProcess+0x48>
 8007aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <USBH_UserProcess+0x1c>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007ac5 	.word	0x08007ac5
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007abd 	.word	0x08007abd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <USBH_UserProcess+0x58>)
 8007abe:	2203      	movs	r2, #3
 8007ac0:	701a      	strb	r2, [r3, #0]
  break;
 8007ac2:	e008      	b.n	8007ad6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ac4:	4b07      	ldr	r3, [pc, #28]	@ (8007ae4 <USBH_UserProcess+0x58>)
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
  break;
 8007aca:	e004      	b.n	8007ad6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <USBH_UserProcess+0x58>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]
  break;
 8007ad2:	e000      	b.n	8007ad6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ad4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	200004c0 	.word	0x200004c0

08007ae8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08a      	sub	sp, #40	@ 0x28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af0:	f107 0314 	add.w	r3, r7, #20
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	605a      	str	r2, [r3, #4]
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b08:	d147      	bne.n	8007b9a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	4b25      	ldr	r3, [pc, #148]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b12:	4a24      	ldr	r2, [pc, #144]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b14:	f043 0301 	orr.w	r3, r3, #1
 8007b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b1a:	4b22      	ldr	r3, [pc, #136]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b34:	f107 0314 	add.w	r3, r7, #20
 8007b38:	4619      	mov	r1, r3
 8007b3a:	481b      	ldr	r0, [pc, #108]	@ (8007ba8 <HAL_HCD_MspInit+0xc0>)
 8007b3c:	f7f9 fa7c 	bl	8001038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007b40:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b46:	2302      	movs	r3, #2
 8007b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b52:	230a      	movs	r3, #10
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b56:	f107 0314 	add.w	r3, r7, #20
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4812      	ldr	r0, [pc, #72]	@ (8007ba8 <HAL_HCD_MspInit+0xc0>)
 8007b5e:	f7f9 fa6b 	bl	8001038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b62:	4b10      	ldr	r3, [pc, #64]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b6c:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	4a0b      	ldr	r2, [pc, #44]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <HAL_HCD_MspInit+0xbc>)
 8007b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	2043      	movs	r0, #67	@ 0x43
 8007b90:	f7f9 fa1b 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b94:	2043      	movs	r0, #67	@ 0x43
 8007b96:	f7f9 fa34 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3728      	adds	r7, #40	@ 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	40020000 	.word	0x40020000

08007bac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe ff6d 	bl	8006a9a <USBH_LL_IncTimer>
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe ffa9 	bl	8006b2e <USBH_LL_Connect>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe ffb2 	bl	8006b5c <USBH_LL_Disconnect>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe ff5f 	bl	8006aee <USBH_LL_PortEnabled>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe ff5f 	bl	8006b0a <USBH_LL_PortDisabled>
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d12a      	bne.n	8007cbc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007c66:	4a18      	ldr	r2, [pc, #96]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a15      	ldr	r2, [pc, #84]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c72:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c76:	4b14      	ldr	r3, [pc, #80]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007c7c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c80:	2208      	movs	r2, #8
 8007c82:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007c84:	4b10      	ldr	r3, [pc, #64]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007c90:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c92:	2202      	movs	r2, #2
 8007c94:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c96:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007c9c:	480a      	ldr	r0, [pc, #40]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007c9e:	f7f9 fb68 	bl	8001372 <HAL_HCD_Init>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ca8:	f7f8 fee8 	bl	8000a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007cac:	4806      	ldr	r0, [pc, #24]	@ (8007cc8 <USBH_LL_Init+0x74>)
 8007cae:	f7f9 ffc9 	bl	8001c44 <HAL_HCD_GetCurrentFrame>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe fee0 	bl	8006a7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200004c4 	.word	0x200004c4

08007ccc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f9 ff36 	bl	8001b54 <HAL_HCD_Start>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f95e 	bl	8007fb0 <USBH_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7f9 ff3e 	bl	8001b9a <HAL_HCD_Stop>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f943 	bl	8007fb0 <USBH_Get_USB_Status>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7f9 ff88 	bl	8001c60 <HAL_HCD_GetCurrentSpeed>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d00c      	beq.n	8007d70 <USBH_LL_GetSpeed+0x38>
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d80d      	bhi.n	8007d76 <USBH_LL_GetSpeed+0x3e>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <USBH_LL_GetSpeed+0x2c>
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d003      	beq.n	8007d6a <USBH_LL_GetSpeed+0x32>
 8007d62:	e008      	b.n	8007d76 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
    break;
 8007d68:	e008      	b.n	8007d7c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6e:	e005      	b.n	8007d7c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007d70:	2302      	movs	r3, #2
 8007d72:	73fb      	strb	r3, [r7, #15]
    break;
 8007d74:	e002      	b.n	8007d7c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007d76:	2301      	movs	r3, #1
 8007d78:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7a:	bf00      	nop
  }
  return  speed;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7f9 ff19 	bl	8001bd4 <HAL_HCD_ResetPort>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f901 	bl	8007fb0 <USBH_Get_USB_Status>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7f9 ff21 	bl	8001c1a <HAL_HCD_HC_GetXferCount>
 8007dd8:	4603      	mov	r3, r0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007de2:	b590      	push	{r4, r7, lr}
 8007de4:	b089      	sub	sp, #36	@ 0x24
 8007de6:	af04      	add	r7, sp, #16
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	461a      	mov	r2, r3
 8007df0:	4603      	mov	r3, r0
 8007df2:	70fb      	strb	r3, [r7, #3]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70bb      	strb	r3, [r7, #2]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007e0a:	787c      	ldrb	r4, [r7, #1]
 8007e0c:	78ba      	ldrb	r2, [r7, #2]
 8007e0e:	78f9      	ldrb	r1, [r7, #3]
 8007e10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e12:	9302      	str	r3, [sp, #8]
 8007e14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4623      	mov	r3, r4
 8007e22:	f7f9 fb0d 	bl	8001440 <HAL_HCD_HC_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f8bf 	bl	8007fb0 <USBH_Get_USB_Status>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd90      	pop	{r4, r7, pc}

08007e40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f9 fba6 	bl	80015b0 <HAL_HCD_HC_Halt>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f8a0 	bl	8007fb0 <USBH_Get_USB_Status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007e7e:	b590      	push	{r4, r7, lr}
 8007e80:	b089      	sub	sp, #36	@ 0x24
 8007e82:	af04      	add	r7, sp, #16
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	4608      	mov	r0, r1
 8007e88:	4611      	mov	r1, r2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	70fb      	strb	r3, [r7, #3]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70bb      	strb	r3, [r7, #2]
 8007e94:	4613      	mov	r3, r2
 8007e96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007ea6:	787c      	ldrb	r4, [r7, #1]
 8007ea8:	78ba      	ldrb	r2, [r7, #2]
 8007eaa:	78f9      	ldrb	r1, [r7, #3]
 8007eac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007eb0:	9303      	str	r3, [sp, #12]
 8007eb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	f7f9 fb99 	bl	80015f8 <HAL_HCD_HC_SubmitRequest>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f86f 	bl	8007fb0 <USBH_Get_USB_Status>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd90      	pop	{r4, r7, pc}

08007ee0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007ef2:	78fa      	ldrb	r2, [r7, #3]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f9 fe7a 	bl	8001bf0 <HAL_HCD_HC_GetURBState>
 8007efc:	4603      	mov	r3, r0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d103      	bne.n	8007f24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f872 	bl	8008008 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007f24:	20c8      	movs	r0, #200	@ 0xc8
 8007f26:	f7f8 ff51 	bl	8000dcc <HAL_Delay>
  return USBH_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
 8007f40:	4613      	mov	r3, r2
 8007f42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	4613      	mov	r3, r2
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	3317      	adds	r3, #23
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	68f9      	ldr	r1, [r7, #12]
 8007f66:	4613      	mov	r3, r2
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	333c      	adds	r3, #60	@ 0x3c
 8007f72:	78ba      	ldrb	r2, [r7, #2]
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e009      	b.n	8007f8c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	333d      	adds	r3, #61	@ 0x3d
 8007f88:	78ba      	ldrb	r2, [r7, #2]
 8007f8a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7f8 ff12 	bl	8000dcc <HAL_Delay>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d817      	bhi.n	8007ff4 <USBH_Get_USB_Status+0x44>
 8007fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <USBH_Get_USB_Status+0x1c>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08007fe3 	.word	0x08007fe3
 8007fd4:	08007fe9 	.word	0x08007fe9
 8007fd8:	08007fef 	.word	0x08007fef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe0:	e00b      	b.n	8007ffa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe6:	e008      	b.n	8007ffa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
    break;
 8007fec:	e005      	b.n	8007ffa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff2:	e002      	b.n	8007ffa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff8:	bf00      	nop
  }
  return usb_status;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e001      	b.n	8008026 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008022:	2301      	movs	r3, #1
 8008024:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	461a      	mov	r2, r3
 800802a:	2101      	movs	r1, #1
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <MX_DriverVbusFS+0x34>)
 800802e:	f7f9 f987 	bl	8001340 <HAL_GPIO_WritePin>
}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40020800 	.word	0x40020800

08008040 <malloc>:
 8008040:	4b02      	ldr	r3, [pc, #8]	@ (800804c <malloc+0xc>)
 8008042:	4601      	mov	r1, r0
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	f000 b82d 	b.w	80080a4 <_malloc_r>
 800804a:	bf00      	nop
 800804c:	2000002c 	.word	0x2000002c

08008050 <free>:
 8008050:	4b02      	ldr	r3, [pc, #8]	@ (800805c <free+0xc>)
 8008052:	4601      	mov	r1, r0
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	f000 b8f5 	b.w	8008244 <_free_r>
 800805a:	bf00      	nop
 800805c:	2000002c 	.word	0x2000002c

08008060 <sbrk_aligned>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4e0f      	ldr	r6, [pc, #60]	@ (80080a0 <sbrk_aligned+0x40>)
 8008064:	460c      	mov	r4, r1
 8008066:	6831      	ldr	r1, [r6, #0]
 8008068:	4605      	mov	r5, r0
 800806a:	b911      	cbnz	r1, 8008072 <sbrk_aligned+0x12>
 800806c:	f000 f8ae 	bl	80081cc <_sbrk_r>
 8008070:	6030      	str	r0, [r6, #0]
 8008072:	4621      	mov	r1, r4
 8008074:	4628      	mov	r0, r5
 8008076:	f000 f8a9 	bl	80081cc <_sbrk_r>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d103      	bne.n	8008086 <sbrk_aligned+0x26>
 800807e:	f04f 34ff 	mov.w	r4, #4294967295
 8008082:	4620      	mov	r0, r4
 8008084:	bd70      	pop	{r4, r5, r6, pc}
 8008086:	1cc4      	adds	r4, r0, #3
 8008088:	f024 0403 	bic.w	r4, r4, #3
 800808c:	42a0      	cmp	r0, r4
 800808e:	d0f8      	beq.n	8008082 <sbrk_aligned+0x22>
 8008090:	1a21      	subs	r1, r4, r0
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f89a 	bl	80081cc <_sbrk_r>
 8008098:	3001      	adds	r0, #1
 800809a:	d1f2      	bne.n	8008082 <sbrk_aligned+0x22>
 800809c:	e7ef      	b.n	800807e <sbrk_aligned+0x1e>
 800809e:	bf00      	nop
 80080a0:	200008a4 	.word	0x200008a4

080080a4 <_malloc_r>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	1ccd      	adds	r5, r1, #3
 80080aa:	f025 0503 	bic.w	r5, r5, #3
 80080ae:	3508      	adds	r5, #8
 80080b0:	2d0c      	cmp	r5, #12
 80080b2:	bf38      	it	cc
 80080b4:	250c      	movcc	r5, #12
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	4606      	mov	r6, r0
 80080ba:	db01      	blt.n	80080c0 <_malloc_r+0x1c>
 80080bc:	42a9      	cmp	r1, r5
 80080be:	d904      	bls.n	80080ca <_malloc_r+0x26>
 80080c0:	230c      	movs	r3, #12
 80080c2:	6033      	str	r3, [r6, #0]
 80080c4:	2000      	movs	r0, #0
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081a0 <_malloc_r+0xfc>
 80080ce:	f000 f869 	bl	80081a4 <__malloc_lock>
 80080d2:	f8d8 3000 	ldr.w	r3, [r8]
 80080d6:	461c      	mov	r4, r3
 80080d8:	bb44      	cbnz	r4, 800812c <_malloc_r+0x88>
 80080da:	4629      	mov	r1, r5
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff ffbf 	bl	8008060 <sbrk_aligned>
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	4604      	mov	r4, r0
 80080e6:	d158      	bne.n	800819a <_malloc_r+0xf6>
 80080e8:	f8d8 4000 	ldr.w	r4, [r8]
 80080ec:	4627      	mov	r7, r4
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	d143      	bne.n	800817a <_malloc_r+0xd6>
 80080f2:	2c00      	cmp	r4, #0
 80080f4:	d04b      	beq.n	800818e <_malloc_r+0xea>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	4639      	mov	r1, r7
 80080fa:	4630      	mov	r0, r6
 80080fc:	eb04 0903 	add.w	r9, r4, r3
 8008100:	f000 f864 	bl	80081cc <_sbrk_r>
 8008104:	4581      	cmp	r9, r0
 8008106:	d142      	bne.n	800818e <_malloc_r+0xea>
 8008108:	6821      	ldr	r1, [r4, #0]
 800810a:	1a6d      	subs	r5, r5, r1
 800810c:	4629      	mov	r1, r5
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff ffa6 	bl	8008060 <sbrk_aligned>
 8008114:	3001      	adds	r0, #1
 8008116:	d03a      	beq.n	800818e <_malloc_r+0xea>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	442b      	add	r3, r5
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	f8d8 3000 	ldr.w	r3, [r8]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	bb62      	cbnz	r2, 8008180 <_malloc_r+0xdc>
 8008126:	f8c8 7000 	str.w	r7, [r8]
 800812a:	e00f      	b.n	800814c <_malloc_r+0xa8>
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	1b52      	subs	r2, r2, r5
 8008130:	d420      	bmi.n	8008174 <_malloc_r+0xd0>
 8008132:	2a0b      	cmp	r2, #11
 8008134:	d917      	bls.n	8008166 <_malloc_r+0xc2>
 8008136:	1961      	adds	r1, r4, r5
 8008138:	42a3      	cmp	r3, r4
 800813a:	6025      	str	r5, [r4, #0]
 800813c:	bf18      	it	ne
 800813e:	6059      	strne	r1, [r3, #4]
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	bf08      	it	eq
 8008144:	f8c8 1000 	streq.w	r1, [r8]
 8008148:	5162      	str	r2, [r4, r5]
 800814a:	604b      	str	r3, [r1, #4]
 800814c:	4630      	mov	r0, r6
 800814e:	f000 f82f 	bl	80081b0 <__malloc_unlock>
 8008152:	f104 000b 	add.w	r0, r4, #11
 8008156:	1d23      	adds	r3, r4, #4
 8008158:	f020 0007 	bic.w	r0, r0, #7
 800815c:	1ac2      	subs	r2, r0, r3
 800815e:	bf1c      	itt	ne
 8008160:	1a1b      	subne	r3, r3, r0
 8008162:	50a3      	strne	r3, [r4, r2]
 8008164:	e7af      	b.n	80080c6 <_malloc_r+0x22>
 8008166:	6862      	ldr	r2, [r4, #4]
 8008168:	42a3      	cmp	r3, r4
 800816a:	bf0c      	ite	eq
 800816c:	f8c8 2000 	streq.w	r2, [r8]
 8008170:	605a      	strne	r2, [r3, #4]
 8008172:	e7eb      	b.n	800814c <_malloc_r+0xa8>
 8008174:	4623      	mov	r3, r4
 8008176:	6864      	ldr	r4, [r4, #4]
 8008178:	e7ae      	b.n	80080d8 <_malloc_r+0x34>
 800817a:	463c      	mov	r4, r7
 800817c:	687f      	ldr	r7, [r7, #4]
 800817e:	e7b6      	b.n	80080ee <_malloc_r+0x4a>
 8008180:	461a      	mov	r2, r3
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	42a3      	cmp	r3, r4
 8008186:	d1fb      	bne.n	8008180 <_malloc_r+0xdc>
 8008188:	2300      	movs	r3, #0
 800818a:	6053      	str	r3, [r2, #4]
 800818c:	e7de      	b.n	800814c <_malloc_r+0xa8>
 800818e:	230c      	movs	r3, #12
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	4630      	mov	r0, r6
 8008194:	f000 f80c 	bl	80081b0 <__malloc_unlock>
 8008198:	e794      	b.n	80080c4 <_malloc_r+0x20>
 800819a:	6005      	str	r5, [r0, #0]
 800819c:	e7d6      	b.n	800814c <_malloc_r+0xa8>
 800819e:	bf00      	nop
 80081a0:	200008a8 	.word	0x200008a8

080081a4 <__malloc_lock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	@ (80081ac <__malloc_lock+0x8>)
 80081a6:	f000 b84b 	b.w	8008240 <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	200009e8 	.word	0x200009e8

080081b0 <__malloc_unlock>:
 80081b0:	4801      	ldr	r0, [pc, #4]	@ (80081b8 <__malloc_unlock+0x8>)
 80081b2:	f000 b846 	b.w	8008242 <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	200009e8 	.word	0x200009e8

080081bc <memset>:
 80081bc:	4402      	add	r2, r0
 80081be:	4603      	mov	r3, r0
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <_sbrk_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d06      	ldr	r5, [pc, #24]	@ (80081e8 <_sbrk_r+0x1c>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7f8 fd14 	bl	8000c04 <_sbrk>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_sbrk_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_sbrk_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	200009e4 	.word	0x200009e4

080081ec <__errno>:
 80081ec:	4b01      	ldr	r3, [pc, #4]	@ (80081f4 <__errno+0x8>)
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000002c 	.word	0x2000002c

080081f8 <__libc_init_array>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008230 <__libc_init_array+0x38>)
 80081fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008234 <__libc_init_array+0x3c>)
 80081fe:	1b64      	subs	r4, r4, r5
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	2600      	movs	r6, #0
 8008204:	42a6      	cmp	r6, r4
 8008206:	d109      	bne.n	800821c <__libc_init_array+0x24>
 8008208:	4d0b      	ldr	r5, [pc, #44]	@ (8008238 <__libc_init_array+0x40>)
 800820a:	4c0c      	ldr	r4, [pc, #48]	@ (800823c <__libc_init_array+0x44>)
 800820c:	f000 f864 	bl	80082d8 <_init>
 8008210:	1b64      	subs	r4, r4, r5
 8008212:	10a4      	asrs	r4, r4, #2
 8008214:	2600      	movs	r6, #0
 8008216:	42a6      	cmp	r6, r4
 8008218:	d105      	bne.n	8008226 <__libc_init_array+0x2e>
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008220:	4798      	blx	r3
 8008222:	3601      	adds	r6, #1
 8008224:	e7ee      	b.n	8008204 <__libc_init_array+0xc>
 8008226:	f855 3b04 	ldr.w	r3, [r5], #4
 800822a:	4798      	blx	r3
 800822c:	3601      	adds	r6, #1
 800822e:	e7f2      	b.n	8008216 <__libc_init_array+0x1e>
 8008230:	0800830c 	.word	0x0800830c
 8008234:	0800830c 	.word	0x0800830c
 8008238:	0800830c 	.word	0x0800830c
 800823c:	08008310 	.word	0x08008310

08008240 <__retarget_lock_acquire_recursive>:
 8008240:	4770      	bx	lr

08008242 <__retarget_lock_release_recursive>:
 8008242:	4770      	bx	lr

08008244 <_free_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4605      	mov	r5, r0
 8008248:	2900      	cmp	r1, #0
 800824a:	d041      	beq.n	80082d0 <_free_r+0x8c>
 800824c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008250:	1f0c      	subs	r4, r1, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfb8      	it	lt
 8008256:	18e4      	addlt	r4, r4, r3
 8008258:	f7ff ffa4 	bl	80081a4 <__malloc_lock>
 800825c:	4a1d      	ldr	r2, [pc, #116]	@ (80082d4 <_free_r+0x90>)
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	b933      	cbnz	r3, 8008270 <_free_r+0x2c>
 8008262:	6063      	str	r3, [r4, #4]
 8008264:	6014      	str	r4, [r2, #0]
 8008266:	4628      	mov	r0, r5
 8008268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800826c:	f7ff bfa0 	b.w	80081b0 <__malloc_unlock>
 8008270:	42a3      	cmp	r3, r4
 8008272:	d908      	bls.n	8008286 <_free_r+0x42>
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	1821      	adds	r1, r4, r0
 8008278:	428b      	cmp	r3, r1
 800827a:	bf01      	itttt	eq
 800827c:	6819      	ldreq	r1, [r3, #0]
 800827e:	685b      	ldreq	r3, [r3, #4]
 8008280:	1809      	addeq	r1, r1, r0
 8008282:	6021      	streq	r1, [r4, #0]
 8008284:	e7ed      	b.n	8008262 <_free_r+0x1e>
 8008286:	461a      	mov	r2, r3
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	b10b      	cbz	r3, 8008290 <_free_r+0x4c>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d9fa      	bls.n	8008286 <_free_r+0x42>
 8008290:	6811      	ldr	r1, [r2, #0]
 8008292:	1850      	adds	r0, r2, r1
 8008294:	42a0      	cmp	r0, r4
 8008296:	d10b      	bne.n	80082b0 <_free_r+0x6c>
 8008298:	6820      	ldr	r0, [r4, #0]
 800829a:	4401      	add	r1, r0
 800829c:	1850      	adds	r0, r2, r1
 800829e:	4283      	cmp	r3, r0
 80082a0:	6011      	str	r1, [r2, #0]
 80082a2:	d1e0      	bne.n	8008266 <_free_r+0x22>
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	6053      	str	r3, [r2, #4]
 80082aa:	4408      	add	r0, r1
 80082ac:	6010      	str	r0, [r2, #0]
 80082ae:	e7da      	b.n	8008266 <_free_r+0x22>
 80082b0:	d902      	bls.n	80082b8 <_free_r+0x74>
 80082b2:	230c      	movs	r3, #12
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	e7d6      	b.n	8008266 <_free_r+0x22>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	1821      	adds	r1, r4, r0
 80082bc:	428b      	cmp	r3, r1
 80082be:	bf04      	itt	eq
 80082c0:	6819      	ldreq	r1, [r3, #0]
 80082c2:	685b      	ldreq	r3, [r3, #4]
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	bf04      	itt	eq
 80082c8:	1809      	addeq	r1, r1, r0
 80082ca:	6021      	streq	r1, [r4, #0]
 80082cc:	6054      	str	r4, [r2, #4]
 80082ce:	e7ca      	b.n	8008266 <_free_r+0x22>
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	bf00      	nop
 80082d4:	200008a8 	.word	0x200008a8

080082d8 <_init>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	bf00      	nop
 80082dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082de:	bc08      	pop	{r3}
 80082e0:	469e      	mov	lr, r3
 80082e2:	4770      	bx	lr

080082e4 <_fini>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr
